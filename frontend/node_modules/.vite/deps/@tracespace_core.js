import "./chunk-FM7WUVZV.js";

// node_modules/@tracespace/parser/dist/tracespace-parser.js
var it = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var ce = {};
var st = {
  get exports() {
    return ce;
  },
  set exports(e2) {
    ce = e2;
  }
};
(function(e2) {
  (function(o3, r3) {
    e2.exports ? e2.exports = r3() : o3.moo = r3();
  })(it, function() {
    var o3 = Object.prototype.hasOwnProperty, r3 = Object.prototype.toString, s3 = typeof new RegExp().sticky == "boolean";
    function i4(n2) {
      return n2 && r3.call(n2) === "[object RegExp]";
    }
    function c4(n2) {
      return n2 && typeof n2 == "object" && !i4(n2) && !Array.isArray(n2);
    }
    function f4(n2) {
      return n2.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    }
    function p3(n2) {
      var a2 = new RegExp("|" + n2);
      return a2.exec("").length - 1;
    }
    function N4(n2) {
      return "(" + n2 + ")";
    }
    function O5(n2) {
      if (!n2.length)
        return "(?!)";
      var a2 = n2.map(function(l2) {
        return "(?:" + l2 + ")";
      }).join("|");
      return "(?:" + a2 + ")";
    }
    function T4(n2) {
      if (typeof n2 == "string")
        return "(?:" + f4(n2) + ")";
      if (i4(n2)) {
        if (n2.ignoreCase)
          throw new Error("RegExp /i flag not allowed");
        if (n2.global)
          throw new Error("RegExp /g flag is implied");
        if (n2.sticky)
          throw new Error("RegExp /y flag is implied");
        if (n2.multiline)
          throw new Error("RegExp /m flag is implied");
        return n2.source;
      } else
        throw new Error("Not a pattern: " + n2);
    }
    function P5(n2, a2) {
      return n2.length > a2 ? n2 : Array(a2 - n2.length + 1).join(" ") + n2;
    }
    function Ke(n2, a2) {
      for (var l2 = n2.length, u3 = 0; ; ) {
        var m4 = n2.lastIndexOf(`
`, l2 - 1);
        if (m4 === -1 || (u3++, l2 = m4, u3 === a2) || l2 === 0)
          break;
      }
      var h2 = u3 < a2 ? 0 : l2 + 1;
      return n2.substring(h2).split(`
`);
    }
    function Qe2(n2) {
      for (var a2 = Object.getOwnPropertyNames(n2), l2 = [], u3 = 0; u3 < a2.length; u3++) {
        var m4 = a2[u3], h2 = n2[m4], v3 = [].concat(h2);
        if (m4 === "include") {
          for (var A4 = 0; A4 < v3.length; A4++)
            l2.push({ include: v3[A4] });
          continue;
        }
        var E3 = [];
        v3.forEach(function(d) {
          c4(d) ? (E3.length && l2.push(Y3(m4, E3)), l2.push(Y3(m4, d)), E3 = []) : E3.push(d);
        }), E3.length && l2.push(Y3(m4, E3));
      }
      return l2;
    }
    function Je2(n2) {
      for (var a2 = [], l2 = 0; l2 < n2.length; l2++) {
        var u3 = n2[l2];
        if (u3.include) {
          for (var m4 = [].concat(u3.include), h2 = 0; h2 < m4.length; h2++)
            a2.push({ include: m4[h2] });
          continue;
        }
        if (!u3.type)
          throw new Error("Rule has no type: " + JSON.stringify(u3));
        a2.push(Y3(u3.type, u3));
      }
      return a2;
    }
    function Y3(n2, a2) {
      if (c4(a2) || (a2 = { match: a2 }), a2.include)
        throw new Error("Matching rules cannot also include states");
      var l2 = {
        defaultType: n2,
        lineBreaks: !!a2.error || !!a2.fallback,
        pop: false,
        next: null,
        push: null,
        error: false,
        fallback: false,
        value: null,
        type: null,
        shouldThrow: false
      };
      for (var u3 in a2)
        o3.call(a2, u3) && (l2[u3] = a2[u3]);
      if (typeof l2.type == "string" && n2 !== l2.type)
        throw new Error("Type transform cannot be a string (type '" + l2.type + "' for token '" + n2 + "')");
      var m4 = l2.match;
      return l2.match = Array.isArray(m4) ? m4 : m4 ? [m4] : [], l2.match.sort(function(h2, v3) {
        return i4(h2) && i4(v3) ? 0 : i4(v3) ? -1 : i4(h2) ? 1 : v3.length - h2.length;
      }), l2;
    }
    function ie3(n2) {
      return Array.isArray(n2) ? Je2(n2) : Qe2(n2);
    }
    var je = Y3("error", { lineBreaks: true, shouldThrow: true });
    function Oe3(n2, a2) {
      for (var l2 = null, u3 = /* @__PURE__ */ Object.create(null), m4 = true, h2 = null, v3 = [], A4 = [], E3 = 0; E3 < n2.length; E3++)
        n2[E3].fallback && (m4 = false);
      for (var E3 = 0; E3 < n2.length; E3++) {
        var d = n2[E3];
        if (d.include)
          throw new Error("Inheritance is not allowed in stateless lexers");
        if (d.error || d.fallback) {
          if (l2)
            throw !d.fallback == !l2.fallback ? new Error("Multiple " + (d.fallback ? "fallback" : "error") + " rules not allowed (for token '" + d.defaultType + "')") : new Error("fallback and error are mutually exclusive (for token '" + d.defaultType + "')");
          l2 = d;
        }
        var _4 = d.match.slice();
        if (m4)
          for (; _4.length && typeof _4[0] == "string" && _4[0].length === 1; ) {
            var q4 = _4.shift();
            u3[q4.charCodeAt(0)] = d;
          }
        if (d.pop || d.push || d.next) {
          if (!a2)
            throw new Error("State-switching options are not allowed in stateless lexers (for token '" + d.defaultType + "')");
          if (d.fallback)
            throw new Error("State-switching options are not allowed on fallback tokens (for token '" + d.defaultType + "')");
        }
        if (_4.length !== 0) {
          m4 = false, v3.push(d);
          for (var H4 = 0; H4 < _4.length; H4++) {
            var U3 = _4[H4];
            if (i4(U3)) {
              if (h2 === null)
                h2 = U3.unicode;
              else if (h2 !== U3.unicode && d.fallback === false)
                throw new Error("If one rule is /u then all must be");
            }
          }
          var V4 = O5(_4.map(T4)), L4 = new RegExp(V4);
          if (L4.test(""))
            throw new Error("RegExp matches empty string: " + L4);
          var X2 = p3(V4);
          if (X2 > 0)
            throw new Error("RegExp has capture groups: " + L4 + `
Use (?: … ) instead`);
          if (!d.lineBreaks && L4.test(`
`))
            throw new Error("Rule should declare lineBreaks: " + L4);
          A4.push(N4(V4));
        }
      }
      var Z = l2 && l2.fallback, K = s3 && !Z ? "ym" : "gm", ee3 = s3 || Z ? "" : "|";
      h2 === true && (K += "u");
      var at3 = new RegExp(O5(A4) + ee3, K);
      return { regexp: at3, groups: v3, fast: u3, error: l2 || je };
    }
    function et3(n2) {
      var a2 = Oe3(ie3(n2));
      return new w4({ start: a2 }, "start");
    }
    function ge2(n2, a2, l2) {
      var u3 = n2 && (n2.push || n2.next);
      if (u3 && !l2[u3])
        throw new Error("Missing state '" + u3 + "' (in token '" + n2.defaultType + "' of state '" + a2 + "')");
      if (n2 && n2.pop && +n2.pop != 1)
        throw new Error("pop must be 1 (in token '" + n2.defaultType + "' of state '" + a2 + "')");
    }
    function tt3(n2, a2) {
      var l2 = n2.$all ? ie3(n2.$all) : [];
      delete n2.$all;
      var u3 = Object.getOwnPropertyNames(n2);
      a2 || (a2 = u3[0]);
      for (var m4 = /* @__PURE__ */ Object.create(null), h2 = 0; h2 < u3.length; h2++) {
        var v3 = u3[h2];
        m4[v3] = ie3(n2[v3]).concat(l2);
      }
      for (var h2 = 0; h2 < u3.length; h2++)
        for (var v3 = u3[h2], A4 = m4[v3], E3 = /* @__PURE__ */ Object.create(null), d = 0; d < A4.length; d++) {
          var _4 = A4[d];
          if (_4.include) {
            var q4 = [d, 1];
            if (_4.include !== v3 && !E3[_4.include]) {
              E3[_4.include] = true;
              var H4 = m4[_4.include];
              if (!H4)
                throw new Error("Cannot include nonexistent state '" + _4.include + "' (in state '" + v3 + "')");
              for (var U3 = 0; U3 < H4.length; U3++) {
                var V4 = H4[U3];
                A4.indexOf(V4) === -1 && q4.push(V4);
              }
            }
            A4.splice.apply(A4, q4), d--;
          }
        }
      for (var L4 = /* @__PURE__ */ Object.create(null), h2 = 0; h2 < u3.length; h2++) {
        var v3 = u3[h2];
        L4[v3] = Oe3(m4[v3], true);
      }
      for (var h2 = 0; h2 < u3.length; h2++) {
        for (var X2 = u3[h2], Z = L4[X2], K = Z.groups, d = 0; d < K.length; d++)
          ge2(K[d], X2, L4);
        for (var ee3 = Object.getOwnPropertyNames(Z.fast), d = 0; d < ee3.length; d++)
          ge2(Z.fast[ee3[d]], X2, L4);
      }
      return new w4(L4, a2);
    }
    function nt3(n2) {
      for (var a2 = typeof Map < "u", l2 = a2 ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null), u3 = Object.getOwnPropertyNames(n2), m4 = 0; m4 < u3.length; m4++) {
        var h2 = u3[m4], v3 = n2[h2], A4 = Array.isArray(v3) ? v3 : [v3];
        A4.forEach(function(E3) {
          if (typeof E3 != "string")
            throw new Error("keyword must be string (in keyword '" + h2 + "')");
          a2 ? l2.set(E3, h2) : l2[E3] = h2;
        });
      }
      return function(E3) {
        return a2 ? l2.get(E3) : l2[E3];
      };
    }
    var w4 = function(n2, a2) {
      this.startState = a2, this.states = n2, this.buffer = "", this.stack = [], this.reset();
    };
    w4.prototype.reset = function(n2, a2) {
      return this.buffer = n2 || "", this.index = 0, this.line = a2 ? a2.line : 1, this.col = a2 ? a2.col : 1, this.queuedToken = a2 ? a2.queuedToken : null, this.queuedText = a2 ? a2.queuedText : "", this.queuedThrow = a2 ? a2.queuedThrow : null, this.setState(a2 ? a2.state : this.startState), this.stack = a2 && a2.stack ? a2.stack.slice() : [], this;
    }, w4.prototype.save = function() {
      return {
        line: this.line,
        col: this.col,
        state: this.state,
        stack: this.stack.slice(),
        queuedToken: this.queuedToken,
        queuedText: this.queuedText,
        queuedThrow: this.queuedThrow
      };
    }, w4.prototype.setState = function(n2) {
      if (!(!n2 || this.state === n2)) {
        this.state = n2;
        var a2 = this.states[n2];
        this.groups = a2.groups, this.error = a2.error, this.re = a2.regexp, this.fast = a2.fast;
      }
    }, w4.prototype.popState = function() {
      this.setState(this.stack.pop());
    }, w4.prototype.pushState = function(n2) {
      this.stack.push(this.state), this.setState(n2);
    };
    var rt3 = s3 ? function(n2, a2) {
      return n2.exec(a2);
    } : function(n2, a2) {
      var l2 = n2.exec(a2);
      return l2[0].length === 0 ? null : l2;
    };
    w4.prototype._getGroup = function(n2) {
      for (var a2 = this.groups.length, l2 = 0; l2 < a2; l2++)
        if (n2[l2 + 1] !== void 0)
          return this.groups[l2];
      throw new Error("Cannot find token type for matched text");
    };
    function ot2() {
      return this.value;
    }
    if (w4.prototype.next = function() {
      var n2 = this.index;
      if (this.queuedGroup) {
        var a2 = this._token(this.queuedGroup, this.queuedText, n2);
        return this.queuedGroup = null, this.queuedText = "", a2;
      }
      var l2 = this.buffer;
      if (n2 !== l2.length) {
        var v3 = this.fast[l2.charCodeAt(n2)];
        if (v3)
          return this._token(v3, l2.charAt(n2), n2);
        var u3 = this.re;
        u3.lastIndex = n2;
        var m4 = rt3(u3, l2), h2 = this.error;
        if (m4 == null)
          return this._token(h2, l2.slice(n2, l2.length), n2);
        var v3 = this._getGroup(m4), A4 = m4[0];
        return h2.fallback && m4.index !== n2 ? (this.queuedGroup = v3, this.queuedText = A4, this._token(h2, l2.slice(n2, m4.index), n2)) : this._token(v3, A4, n2);
      }
    }, w4.prototype._token = function(n2, a2, l2) {
      var u3 = 0;
      if (n2.lineBreaks) {
        var m4 = /\n/g, h2 = 1;
        if (a2 === `
`)
          u3 = 1;
        else
          for (; m4.exec(a2); )
            u3++, h2 = m4.lastIndex;
      }
      var v3 = {
        type: typeof n2.type == "function" && n2.type(a2) || n2.defaultType,
        value: typeof n2.value == "function" ? n2.value(a2) : a2,
        text: a2,
        toString: ot2,
        offset: l2,
        lineBreaks: u3,
        line: this.line,
        col: this.col
      }, A4 = a2.length;
      if (this.index += A4, this.line += u3, u3 !== 0 ? this.col = A4 - h2 + 1 : this.col += A4, n2.shouldThrow) {
        var E3 = new Error(this.formatError(v3, "invalid syntax"));
        throw E3;
      }
      return n2.pop ? this.popState() : n2.push ? this.pushState(n2.push) : n2.next && this.setState(n2.next), v3;
    }, typeof Symbol < "u" && Symbol.iterator) {
      var se3 = function(n2) {
        this.lexer = n2;
      };
      se3.prototype.next = function() {
        var n2 = this.lexer.next();
        return { value: n2, done: !n2 };
      }, se3.prototype[Symbol.iterator] = function() {
        return this;
      }, w4.prototype[Symbol.iterator] = function() {
        return new se3(this);
      };
    }
    return w4.prototype.formatError = function(n2, a2) {
      if (n2 == null)
        var l2 = this.buffer.slice(this.index), n2 = {
          text: l2,
          offset: this.index,
          lineBreaks: l2.indexOf(`
`) === -1 ? 0 : 1,
          line: this.line,
          col: this.col
        };
      var u3 = 2, m4 = Math.max(n2.line - u3, 1), h2 = n2.line + u3, v3 = String(h2).length, A4 = Ke(
        this.buffer,
        this.line - n2.line + u3 + 1
      ).slice(0, 5), E3 = [];
      E3.push(a2 + " at line " + n2.line + " col " + n2.col + ":"), E3.push("");
      for (var d = 0; d < A4.length; d++) {
        var _4 = A4[d], q4 = m4 + d;
        E3.push(P5(String(q4), v3) + "  " + _4), q4 === n2.line && E3.push(P5("", v3 + n2.col + 1) + "^");
      }
      return E3.join(`
`);
    }, w4.prototype.clone = function() {
      return new w4(this.states, this.state);
    }, w4.prototype.has = function(n2) {
      return true;
    }, {
      compile: et3,
      states: tt3,
      error: Object.freeze({ error: true }),
      fallback: Object.freeze({ fallback: true }),
      keywords: nt3
    };
  });
})(st);
var Ae = ce;
var Q = "T_CODE";
var y = "G_CODE";
var B = "M_CODE";
var I = "D_CODE";
var g = "ASTERISK";
var x = "PERCENT";
var Me = "EQUALS";
var W = "COMMA";
var k = "OPERATOR";
var ue = "GERBER_FORMAT";
var ne = "GERBER_UNITS";
var Ce = "GERBER_TOOL_MACRO";
var Ne = "GERBER_TOOL_DEF";
var _e = "GERBER_LOAD_POLARITY";
var xe = "GERBER_STEP_REPEAT";
var J = "GERBER_MACRO_VARIABLE";
var we = "SEMICOLON";
var Le = "DRILL_UNITS";
var fe = "DRILL_ZERO_INCLUSION";
var M = "COORD_CHAR";
var C = "NUMBER";
var lt = "WORD";
var ct = "WHITESPACE";
var S = "NEWLINE";
var ut = "CATCHALL";
var ft = "ERROR";
var pt = /^0*/;
var Ie = (e2) => e2.replace(pt, "");
var te = (e2) => Ie(e2.slice(1)) || "0";
var ht = {
  [Q]: {
    match: /T\d+/,
    value: te
  },
  [y]: {
    match: /G\d+/,
    value: te
  },
  [B]: {
    match: /M\d+/,
    value: te
  },
  [I]: {
    match: /D\d+/,
    value: te
  },
  [g]: "*",
  [x]: "%",
  [Me]: "=",
  [ue]: {
    match: /FS[LTDAI]+/,
    value: (e2) => e2.slice(2)
  },
  [ne]: {
    match: /MO(?:IN|MM)/,
    value: (e2) => e2.slice(2)
  },
  [Ce]: {
    // "-" in a tool name is illegal, but some gerber writers misbehave
    // https://github.com/mcous/gerber-parser/pull/13
    match: /AM[a-zA-Z_.$][\w.-]*/,
    value: (e2) => e2.slice(2)
  },
  [Ne]: {
    match: /ADD\d+[a-zA-Z_.$][\w.-]*/,
    value: (e2) => Ie(e2.slice(3))
  },
  [_e]: {
    match: /LP[DC]/,
    value: (e2) => e2.slice(2)
  },
  [xe]: "SR",
  [J]: /\$\d+/,
  [we]: ";",
  [Le]: /^(?:METRIC|INCH)/,
  [fe]: {
    match: /,(?:TZ|LZ)/,
    value: (e2) => e2.slice(1)
  },
  [M]: /[XYIJACFSBHZN]/,
  [C]: /[+-]?[\d.]+/,
  [k]: ["x", "/", "+", "-", "(", ")"],
  [W]: ",",
  [lt]: /[a-zA-Z]+/,
  [ct]: /[ \t]+/,
  [S]: {
    match: /\r?\n/,
    lineBreaks: true
  },
  [ut]: /\S/,
  [ft]: Ae.error
};
function dt() {
  const e2 = Ae.compile(ht);
  return { feed: o3 };
  function o3(s3, i4 = null) {
    return e2.reset(s3, i4 ?? void 0), r3((i4 == null ? void 0 : i4.offset) ?? 0);
  }
  function r3(s3) {
    return {
      [Symbol.iterator]() {
        return this;
      },
      next() {
        const i4 = e2.next();
        if (i4) {
          const c4 = { ...i4, offset: s3 + i4.offset }, f4 = {
            ...e2.save(),
            offset: s3 + (e2.index ?? 0)
          };
          return { value: [c4, f4] };
        }
        return { value: void 0, done: true };
      }
    };
  }
}
var Se = "gerber";
var pe = "drill";
var he = "mm";
var de = "in";
var be = "leading";
var Pe = "trailing";
var mt = "absolute";
var vt = "incremental";
var me = "circle";
var De = "rectangle";
var Et = "obround";
var yt = "polygon";
var Rt = "macroShape";
var Mn = "1";
var Cn = "2";
var Nn = "20";
var _n = "21";
var xn = "22";
var wn = "4";
var Ln = "5";
var In = "6";
var Sn = "7";
var Ot = "shape";
var Ge = "move";
var gt = "segment";
var Tt = "slot";
var At = "line";
var Mt = "cwArc";
var Ct = "ccwArc";
var Nt = "single";
var _t = "multi";
var xt = "dark";
var wt = "clear";
var re = "TOKEN";
var G = "MIN_TO_MAX";
function t(e2, o3) {
  return { rule: re, type: e2, value: o3 };
}
function F(e2, o3) {
  return { rule: re, type: e2, value: o3, negate: true };
}
function D(e2) {
  return { rule: G, min: 1, max: 1, match: e2 };
}
function j(e2) {
  return { rule: G, min: 0, max: 1, match: e2 };
}
function b(e2) {
  return { rule: G, min: 0, max: Number.POSITIVE_INFINITY, match: e2 };
}
function Be(e2) {
  return { rule: G, min: 1, max: Number.POSITIVE_INFINITY, match: e2 };
}
function z(e2, o3, r3) {
  return { rule: G, min: e2, max: o3, match: r3 };
}
function qe(e2, o3) {
  const r3 = [];
  for (const s3 of o3) {
    const i4 = It(e2, s3.rules);
    if (i4 === Ue)
      r3.push(s3);
    else if (i4 === He)
      return {
        filetype: s3.filetype,
        nodes: s3.createNodes(e2)
      };
  }
  return r3.length > 0 ? { candidates: r3, tokens: e2 } : {};
}
var He = "FULL_MATCH";
var Ue = "PARTIAL_MATCH";
var Lt = "NO_MATCH";
function It(e2, o3) {
  let r3 = 0, s3 = 0, i4 = 0;
  for (; r3 < o3.length && s3 < e2.length; ) {
    const c4 = o3[r3], f4 = e2[s3];
    if (ke(c4, f4))
      c4.rule === re || c4.rule === G && i4 >= c4.max - 1 ? (r3++, s3++, i4 = 0) : c4.rule === G && (s3++, i4++);
    else if (c4.rule === G && i4 >= c4.min)
      i4 = 0, r3++;
    else
      return Lt;
  }
  return r3 < o3.length ? Ue : He;
}
function ke(e2, o3) {
  if (e2.rule === re) {
    const r3 = e2.type === o3.type, s3 = e2.value === null || typeof e2.value > "u" || typeof e2.value == "string" && e2.value === o3.value || e2.value instanceof RegExp && e2.value.test(o3.value), i4 = r3 && s3;
    return e2.negate ? !i4 : i4;
  }
  return Array.isArray(e2.match) ? e2.match.some((r3) => ke(r3, o3)) : false;
}
var St = "root";
var Fe = "comment";
var bt = "drillHeader";
var ze = "done";
var ve = "units";
var $e = "coordinateFormat";
var Ve = "toolDefinition";
var Pt = "toolMacro";
var Ee = "toolChange";
var Dt = "loadPolarity";
var Gt = "stepRepeat";
var ye = "graphic";
var oe = "interpolateMode";
var Bt = "regionMode";
var qt = "quadrantMode";
var Ht = "unimplemented";
var Ut = "macroComment";
var kt = "macroVariable";
var Ft = "macroPrimitive";
function $(e2) {
  return Object.fromEntries(
    e2.map((o3, r3) => [o3, e2[r3 - 1]]).filter(([o3, r3]) => o3.type === C && (r3 == null ? void 0 : r3.type) === M).map(([o3, r3]) => [r3.value.toLowerCase(), o3.value])
  );
}
function ae(e2) {
  return e2.filter((r3) => r3.type === y).map((r3) => r3.value === "0" ? Ge : r3.value === "1" ? At : r3.value === "2" ? Mt : r3.value === "3" ? Ct : r3.value === "5" ? pe : null)[0] ?? null;
}
function zt(e2) {
  return e2.filter((r3) => r3.type === I).map((r3) => r3.value === "1" ? gt : r3.value === "2" ? Ge : r3.value === "3" ? Ot : null)[0] ?? null;
}
function Re(e2) {
  return e2.map((o3) => o3.value).join("").trim();
}
function R(e2, o3 = {}) {
  const { head: r3 = e2[0], length: s3 = 0 } = o3, i4 = s3 > 0 ? e2[e2.indexOf(r3) + s3 - 1] : e2[e2.length - 1];
  return {
    start: { line: r3.line, column: r3.col, offset: r3.offset },
    end: { line: i4.line, column: i4.col, offset: i4.offset }
  };
}
var $t = {
  name: "units",
  rules: [
    D([
      t(Le),
      t(B, "71"),
      t(B, "72")
    ]),
    b([
      t(W),
      t(fe),
      t(C, /^0{1,8}\.0{1,8}$/)
    ]),
    t(S)
  ],
  createNodes(e2) {
    const o3 = e2[0].value === "INCH" || e2[0].value === "72" ? de : he, r3 = e2.filter((c4) => c4.type === fe).map((c4) => c4.value === "LZ" ? Pe : c4.value === "TZ" ? be : null), s3 = e2.filter((c4) => c4.type === C).map((c4) => {
      const [f4 = "", p3 = ""] = c4.value.split(".");
      return [f4.length, p3.length];
    }), i4 = [
      { type: ve, position: R(e2.slice(0, 2)), units: o3 }
    ];
    return (r3.length > 0 || s3.length > 0) && i4.push({
      type: $e,
      position: R(e2.slice(1)),
      mode: null,
      format: s3[0] ?? null,
      zeroSuppression: r3[0] ?? null
    }), i4;
  }
};
var Vt = {
  name: "tool",
  rules: [
    t(Q),
    z(0, 12, [
      t(M, "C"),
      t(M, "F"),
      t(M, "S"),
      t(M, "B"),
      t(M, "H"),
      t(M, "Z"),
      t(C)
    ]),
    t(S)
  ],
  createNodes(e2) {
    const o3 = e2[0].value, r3 = R(e2), { c: s3 = null } = $(e2.slice(1, -1)), i4 = s3 === null ? null : { type: me, diameter: Number(s3) };
    return i4 ? [{ type: Ve, hole: null, position: r3, shape: i4, code: o3 }] : [{ type: Ee, position: r3, code: o3 }];
  }
};
var Zt = {
  name: "operationMode",
  rules: [
    D([
      t(y, "0"),
      t(y, "1"),
      t(y, "2"),
      t(y, "3"),
      t(y, "5")
    ]),
    t(S)
  ],
  createNodes: (e2) => [
    {
      type: oe,
      position: R(e2),
      mode: ae(e2)
    }
  ]
};
var Wt = {
  name: "operation",
  rules: [
    z(0, 2, [
      t(Q),
      t(y, "0"),
      t(y, "1"),
      t(y, "2"),
      t(y, "3"),
      t(y, "5")
    ]),
    z(2, 8, [t(M), t(C)]),
    j([t(Q)]),
    t(S)
  ],
  createNodes(e2) {
    const o3 = e2.filter(
      (P5) => P5.type === M || P5.type === C
    ), r3 = e2.find((P5) => P5.type === y), s3 = e2.find((P5) => P5.type === Q), i4 = $(o3), c4 = s3 ? s3.value : null, f4 = ae(e2), p3 = R(e2, {
      head: o3[0],
      length: o3.length + 1
    }), N4 = R(e2, { head: r3, length: 2 }), O5 = R(e2, { head: s3, length: 2 }), T4 = [
      {
        type: ye,
        position: p3,
        graphic: null,
        coordinates: i4
      }
    ];
    return f4 && T4.unshift({ type: oe, position: N4, mode: f4 }), c4 && T4.unshift({ type: Ee, position: O5, code: c4 }), T4;
  }
};
var Yt = {
  name: "slot",
  rules: [
    z(2, 4, [t(M), t(C)]),
    t(y, "85"),
    z(2, 4, [t(M), t(C)]),
    t(S)
  ],
  createNodes(e2) {
    const o3 = e2.find((c4) => c4.type === y), r3 = o3 ? e2.indexOf(o3) : -1, s3 = Object.fromEntries(
      Object.entries($(e2.slice(0, r3))).map(
        ([c4, f4]) => [`${c4}0`, f4]
      )
    ), i4 = $(e2.slice(r3));
    return [
      {
        type: ye,
        position: R(e2),
        graphic: Tt,
        coordinates: { ...s3, ...i4 }
      }
    ];
  }
};
var Xt = {
  name: "done",
  rules: [
    D([t(B, "30"), t(B, "0")]),
    t(S)
  ],
  createNodes: (e2) => [
    { type: ze, position: R(e2) }
  ]
};
var Kt = {
  name: "header",
  rules: [
    D([t(B, "48"), t(x)]),
    t(S)
  ],
  createNodes: (e2) => [
    { type: bt, position: R(e2) }
  ]
};
var Qt = {
  name: "comment",
  rules: [
    t(we),
    b([F(S)]),
    t(S)
  ],
  createNodes: (e2) => [
    {
      type: Fe,
      comment: Re(e2.slice(1, -1)),
      position: R(e2)
    }
  ]
};
var Ze = [
  Vt,
  Zt,
  Wt,
  Yt,
  Qt,
  $t,
  Xt,
  Kt
].map((e2) => ({ ...e2, filetype: pe }));
var Jt = {
  name: "macroComment",
  rules: [
    t(C, "0"),
    b([F(g)]),
    t(g)
  ],
  createNodes: tn
};
var jt = {
  name: "macroVariable",
  rules: [
    t(J),
    t(Me),
    Be([
      t(C),
      t(k),
      t(J),
      t(M, "X")
    ]),
    t(g)
  ],
  createNodes: rn
};
var en = {
  name: "macroPrimitive",
  rules: [
    t(C),
    t(W),
    Be([
      t(W),
      t(C),
      t(k),
      t(J),
      t(M, "X")
    ]),
    t(g)
  ],
  createNodes: nn
};
function tn(e2) {
  const o3 = e2.slice(1, -1).map((r3) => r3.text).join("").trim();
  return [
    { type: Ut, position: R(e2), comment: o3 }
  ];
}
function nn(e2) {
  const o3 = e2[0].value, r3 = [[]];
  let s3 = r3[0];
  for (const c4 of e2.slice(2, -1))
    c4.type === W ? (s3 = [], r3.push(s3)) : s3.push(c4);
  const i4 = r3.map(
    (c4) => We(c4)
  );
  return [
    {
      type: Ft,
      position: R(e2),
      code: o3,
      parameters: i4
    }
  ];
}
function rn(e2) {
  const o3 = e2[0].value, r3 = We(e2.slice(2, -1));
  return [
    {
      type: kt,
      position: R(e2),
      name: o3,
      value: r3
    }
  ];
}
function We(e2) {
  const o3 = e2.map((f4) => f4.type === M ? { ...f4, type: k, value: "x" } : f4);
  return c4();
  function r3() {
    return o3[0] ?? null;
  }
  function s3() {
    const f4 = o3.shift();
    if (f4.type === C)
      return Number(f4.value);
    if (f4.type === J)
      return f4.value;
    const p3 = c4();
    return o3.shift(), p3;
  }
  function i4() {
    let f4 = s3(), p3 = r3();
    for (; (p3 == null ? void 0 : p3.type) === k && (p3.value === "x" || p3.value === "/"); )
      o3.shift(), f4 = {
        left: f4,
        right: s3(),
        operator: p3.value
      }, p3 = r3();
    return f4;
  }
  function c4() {
    let f4 = i4(), p3 = r3();
    for (; (p3 == null ? void 0 : p3.type) === k && (p3.value === "+" || p3.value === "-") || (p3 == null ? void 0 : p3.type) === C; ) {
      let N4 = "+";
      p3.type === k && (o3.shift(), N4 = p3.value);
      const O5 = i4();
      f4 = { left: f4, right: O5, operator: N4 }, p3 = r3();
    }
    return f4;
  }
}
var Te = [en, jt, Jt];
function on(e2) {
  let o3 = Te, r3 = [];
  const s3 = [];
  for (const i4 of e2) {
    const c4 = qe([...r3, i4], o3);
    c4.nodes && s3.push(...c4.nodes), r3 = c4.tokens ?? [], o3 = c4.candidates ?? Te;
  }
  return s3;
}
var le = (e2) => {
  if (e2.length === 1) {
    const [o3] = e2;
    return { type: me, diameter: o3 };
  }
  if (e2.length === 2) {
    const [o3, r3] = e2;
    return { type: De, xSize: o3, ySize: r3 };
  }
  return null;
};
var an = {
  name: "done",
  rules: [
    D([t(B, "0"), t(B, "2")]),
    t(g)
  ],
  createNodes: (e2) => [
    { type: ze, position: R(e2) }
  ]
};
var sn = {
  name: "comment",
  rules: [
    t(y, "4"),
    b([F(g)]),
    t(g)
  ],
  createNodes: (e2) => [
    {
      type: Fe,
      position: R(e2),
      comment: Re(e2.slice(1, -1))
    }
  ]
};
var ln = {
  name: "format",
  rules: [
    t(x),
    t(ue),
    b([F(M, "X")]),
    t(M, "X"),
    t(C),
    t(M, "Y"),
    t(C),
    b([F(g)]),
    t(g),
    // Including units here is invalid syntax, but Cadence Allegro does it
    // https://github.com/tracespace/tracespace/issues/234
    z(0, 2, [t(ne), t(g)]),
    t(x)
  ],
  createNodes(e2) {
    var N4;
    let o3 = null, r3 = null, s3 = null;
    const i4 = $(e2), c4 = e2.findIndex((O5) => O5.type === g), f4 = e2.find((O5) => O5.type === ne);
    for (const O5 of e2.filter((T4) => T4.type === ue))
      O5.value.includes("T") && (r3 = Pe), O5.value.includes("L") && (r3 = be), O5.value.includes("I") && (s3 = vt), O5.value.includes("A") && (s3 = mt);
    if (i4.x === i4.y && ((N4 = i4.x) == null ? void 0 : N4.length) === 2) {
      const O5 = Number(i4.x[0]), T4 = Number(i4.x[1]);
      O5 && T4 && (o3 = [O5, T4]);
    }
    const p3 = [
      {
        type: $e,
        position: R(e2.slice(1, c4 + 1)),
        zeroSuppression: r3,
        format: o3,
        mode: s3
      }
    ];
    return f4 && p3.push({
      type: ve,
      position: R(e2.slice(1, -1), { head: f4 }),
      units: f4.value === "MM" ? he : de
    }), p3;
  }
};
var cn = {
  name: "units",
  rules: [
    t(x),
    t(ne),
    t(g),
    t(x)
  ],
  createNodes: (e2) => [
    {
      type: ve,
      position: R(e2.slice(1, -1)),
      units: e2[1].value === "MM" ? he : de
    }
  ]
};
var un = {
  name: "toolMacro",
  rules: [
    t(x),
    t(Ce),
    t(g),
    b([F(x)]),
    t(x)
  ],
  createNodes(e2) {
    const o3 = e2[1].value, r3 = R(e2.slice(1, -1)), s3 = e2.slice(3, -1);
    return [
      {
        type: Pt,
        position: r3,
        children: on(s3),
        name: o3
      }
    ];
  }
};
var fn = {
  name: "toolDefinition",
  rules: [
    t(x),
    t(Ne),
    b([
      t(W),
      t(C),
      t(M, "X")
    ]),
    t(g),
    t(x)
  ],
  createNodes(e2) {
    let o3, r3 = null;
    const s3 = /(\d+)(.+)/.exec(e2[1].value), [, i4 = "", c4 = ""] = s3 ?? [], f4 = e2.slice(3, -2).filter((p3) => p3.type === C).map((p3) => Number(p3.value));
    switch (c4) {
      case "C": {
        const [p3, ...N4] = f4;
        o3 = { type: me, diameter: p3 }, r3 = le(N4);
        break;
      }
      case "R":
      case "O": {
        const [p3, N4, ...O5] = f4;
        o3 = { type: c4 === "R" ? De : Et, xSize: p3, ySize: N4 }, r3 = le(O5);
        break;
      }
      case "P": {
        const [p3, N4, O5 = null, ...T4] = f4;
        o3 = { type: yt, diameter: p3, vertices: N4, rotation: O5 }, r3 = le(T4);
        break;
      }
      default:
        o3 = { type: Rt, name: c4, variableValues: f4 };
    }
    return [
      {
        type: Ve,
        position: R(e2.slice(1, -1)),
        code: i4,
        shape: o3,
        hole: r3
      }
    ];
  }
};
var pn = {
  name: "toolChange",
  rules: [
    j([t(y, "54")]),
    t(I),
    t(g)
  ],
  createNodes: (e2) => [
    {
      type: Ee,
      position: R(e2),
      code: e2.find((o3) => o3.type === I).value
    }
  ]
};
var Ye = (e2) => {
  const o3 = zt(e2), r3 = $(e2), s3 = ae(e2), i4 = R(e2, {
    head: s3 ? e2[1] : e2[0]
  }), c4 = [
    { type: ye, position: i4, graphic: o3, coordinates: r3 }
  ];
  if (s3) {
    const f4 = R(e2, { head: e2[0], length: 2 });
    c4.unshift({ type: oe, position: f4, mode: s3 });
  }
  return c4;
};
var hn = {
  name: "operation",
  rules: [
    j([
      t(y, "1"),
      t(y, "2"),
      t(y, "3")
    ]),
    z(2, 8, [t(M), t(C)]),
    j([
      t(I, "1"),
      t(I, "2"),
      t(I, "3")
    ]),
    t(g)
  ],
  createNodes: Ye
};
var dn = {
  name: "operationWithoutCoords",
  rules: [
    j([
      t(y, "1"),
      t(y, "2"),
      t(y, "3")
    ]),
    D([
      t(I, "1"),
      t(I, "2"),
      t(I, "3")
    ]),
    t(g)
  ],
  createNodes: Ye
};
var mn = {
  name: "interpolationMode",
  rules: [
    D([
      t(y, "1"),
      t(y, "2"),
      t(y, "3")
    ]),
    t(g)
  ],
  createNodes: (e2) => [
    {
      type: oe,
      position: R(e2),
      mode: ae(e2)
    }
  ]
};
var vn = {
  name: "regionMode",
  rules: [
    D([t(y, "36"), t(y, "37")]),
    t(g)
  ],
  createNodes: (e2) => [
    {
      type: Bt,
      position: R(e2),
      region: e2[0].value === "36"
    }
  ]
};
var En = {
  name: "quadrantMode",
  rules: [
    D([t(y, "74"), t(y, "75")]),
    t(g)
  ],
  createNodes: (e2) => [
    {
      type: qt,
      position: R(e2),
      quadrant: e2[0].value === "74" ? Nt : _t
    }
  ]
};
var yn = {
  name: "loadPolarity",
  rules: [
    t(x),
    t(_e),
    t(g),
    t(x)
  ],
  createNodes: (e2) => [
    {
      type: Dt,
      position: R(e2.slice(1, -1)),
      polarity: e2[1].value === "D" ? xt : wt
    }
  ]
};
var Rn = {
  name: "stepRepeat",
  rules: [
    t(x),
    t(xe),
    b([t(M), t(C)]),
    t(g),
    t(x)
  ],
  createNodes(e2) {
    const o3 = $(e2), r3 = Object.fromEntries(
      Object.entries(o3).map(([s3, i4]) => [
        s3,
        Number(i4)
      ])
    );
    return [
      {
        type: Gt,
        position: R(e2.slice(1, -1)),
        stepRepeat: r3
      }
    ];
  }
};
var On = {
  name: "unimplementedExtendedCommand",
  rules: [
    t(x),
    b([F(g)]),
    t(g),
    t(x)
  ],
  createNodes: (e2) => [
    {
      type: Ht,
      position: R(e2.slice(1, -1)),
      value: Re(e2)
    }
  ]
};
var Xe = [
  hn,
  dn,
  mn,
  pn,
  fn,
  un,
  sn,
  vn,
  En,
  yn,
  Rn,
  ln,
  cn,
  an,
  On
].map((e2) => ({ ...e2, filetype: Se }));
var gn = [...Xe, ...Ze];
function Tn(e2, o3 = null) {
  const r3 = [];
  let s3 = p3(), i4 = [], c4 = null, f4 = "";
  for (const [N4, O5] of e2) {
    const T4 = qe([...i4, N4], s3);
    T4.nodes ? (r3.push(...T4.nodes), c4 = O5, f4 = "") : f4 += N4.text, o3 = o3 ?? T4.filetype ?? null, i4 = T4.tokens ?? [], s3 = T4.candidates ?? p3();
  }
  return {
    filetype: o3,
    unmatched: f4,
    nodes: r3,
    lexerState: c4
  };
  function p3() {
    return o3 === Se ? Xe : o3 === pe ? Ze : gn;
  }
}
function An() {
  const e2 = dt(), o3 = [];
  let r3 = null, s3 = null, i4 = "";
  const c4 = { lexer: e2, feed: f4, result: p3 };
  return c4;
  function f4(N4) {
    const O5 = e2.feed(`${i4}${N4}`, s3), T4 = Tn(O5, r3);
    return r3 = r3 ?? T4.filetype, i4 = T4.unmatched, s3 = T4.lexerState ?? s3, o3.push(...T4.nodes), c4;
  }
  function p3() {
    if (r3 === null)
      throw new Error("File type not recognized");
    return { type: St, filetype: r3, children: o3 };
  }
}
function bn(e2) {
  return An().feed(e2).result();
}

// node_modules/@tracespace/plotter/dist/tracespace-plotter.js
var Jt2 = "image";
var v = "imageShape";
var it2 = "imagePath";
var Kt2 = "imageRegion";
var O = "line";
var g2 = "arc";
var S2 = "circle";
var H = "rectangle";
var M2 = "polygon";
var z2 = "outline";
var Y = "layeredShape";
var { PI: T } = Math;
var P = T / 2;
var at = 3 * P;
var A = 2 * T;
function V(t2) {
  return t2 >= 0 && t2 <= A ? t2 : t2 < 0 ? t2 + A : t2 > A ? t2 - A : V(t2);
}
function tt(t2) {
  return t2 >= P ? t2 - P : t2 + at;
}
function ut2(t2) {
  return t2 * Math.PI / 180;
}
function C2(t2, e2, n2 = 0) {
  const r3 = ut2(n2), [c4, s3] = [Math.sin(r3), Math.cos(r3)], [o3, i4] = t2, a2 = o3 * s3 - i4 * c4 + e2[0], p3 = o3 * c4 + i4 * s3 + e2[1];
  return [a2, p3];
}
function pt2(t2, e2) {
  return t2[0] === e2[0] && t2[1] === e2[1];
}
function q(t2) {
  return t2.length === 0;
}
function ft2() {
  return [];
}
function yt2(t2, e2) {
  return q(t2) ? e2 : q(e2) ? t2 : [
    Math.min(t2[0], e2[0]),
    Math.min(t2[1], e2[1]),
    Math.max(t2[2], e2[2]),
    Math.max(t2[3], e2[3])
  ];
}
function N(t2) {
  return t2.reduce(yt2, ft2());
}
function ht2(t2) {
  return N(t2.map(lt2));
}
function lt2(t2) {
  return t2.type === v ? U(t2.shape) : X(
    t2.segments,
    t2.type === it2 ? t2.width : void 0
  );
}
function U(t2) {
  switch (t2.type) {
    case S2: {
      const { cx: e2, cy: n2, r: r3 } = t2;
      return $2([e2, n2], r3);
    }
    case H: {
      const { x: e2, y: n2, xSize: r3, ySize: c4 } = t2;
      return [e2, n2, e2 + r3, n2 + c4];
    }
    case M2:
      return N(t2.points.map((e2) => $2(e2)));
    case z2:
      return X(t2.segments);
    case Y:
      return N(t2.shapes.filter(({ erase: e2 }) => !e2).map(U));
  }
}
function X(t2, e2 = 0) {
  const n2 = e2 / 2, r3 = [];
  for (const c4 of t2)
    if (r3.push(c4.start, c4.end), c4.type === g2) {
      const { start: s3, end: o3, center: i4, radius: a2 } = c4, p3 = Math.abs(o3[2] - s3[2]);
      let [f4, u3] = o3[2] > s3[2] ? [s3[2], o3[2]] : [o3[2], s3[2]];
      f4 = V(f4), u3 = V(u3);
      const l2 = [
        [i4[0] + a2, i4[1]],
        [i4[0], i4[1] + a2],
        [i4[0] - a2, i4[1]],
        [i4[0], i4[1] - a2]
      ];
      for (const y3 of l2)
        (f4 > u3 || p3 === A) && r3.push(y3), f4 = tt(f4), u3 = tt(u3);
    }
  return N(r3.map((c4) => $2(c4, n2)));
}
function $2(t2, e2 = 0) {
  return [
    t2[0] - e2,
    t2[1] - e2,
    t2[0] + e2,
    t2[1] + e2
  ];
}
var Ce2 = Object.freeze(Object.defineProperty({
  __proto__: null,
  add: yt2,
  empty: ft2,
  fromGraphic: lt2,
  fromGraphics: ht2,
  fromPath: X,
  fromShape: U,
  isEmpty: q,
  sum: N
}, Symbol.toStringTag, { value: "Module" }));
var Zt2 = /FORMAT={?(\d):(\d)/;
function te2(t2) {
  const { children: e2 } = t2;
  let n2 = null, r3 = null, c4 = null, s3 = 0;
  for (; s3 < e2.length && (n2 === null || r3 === null || c4 === null); ) {
    const o3 = e2[s3];
    switch (o3.type) {
      case ve: {
        n2 = o3.units;
        break;
      }
      case $e: {
        r3 = o3.format, c4 = o3.zeroSuppression;
        break;
      }
      case ye: {
        const { coordinates: i4 } = o3;
        for (const a2 of Object.values(i4)) {
          if (c4 !== null)
            break;
          a2.endsWith("0") || a2.includes(".") ? c4 = be : a2.startsWith("0") && (c4 = Pe);
        }
        break;
      }
      case Fe: {
        const { comment: i4 } = o3, a2 = Zt2.exec(i4);
        /suppress trailing/i.test(i4) ? c4 = Pe : /(suppress leading|keep zeros)/i.test(i4) && (c4 = be), a2 && (r3 = [Number(a2[1]), Number(a2[2])]);
        break;
      }
    }
    s3 += 1;
  }
  return {
    units: n2 ?? de,
    coordinateFormat: r3 ?? [2, 4],
    zeroSuppression: c4 ?? be
  };
}
var b2 = "simpleTool";
var dt2 = "macroTool";
function ee() {
  return Object.create(ne2);
}
var ne2 = {
  _currentToolCode: void 0,
  _toolsByCode: {},
  _macrosByName: {},
  use(t2) {
    if (t2.type === Pt && (this._macrosByName[t2.name] = t2.children), t2.type === Ve) {
      const { shape: e2, hole: n2 } = t2, r3 = e2.type === Rt ? {
        type: dt2,
        macro: this._macrosByName[e2.name] ?? [],
        variableValues: e2.variableValues
      } : { type: b2, shape: e2, ...n2 && { hole: n2 } };
      this._toolsByCode[t2.code] = r3;
    }
    return (t2.type === Ve || t2.type === Ee) && (this._currentToolCode = t2.code), typeof this._currentToolCode == "string" ? this._toolsByCode[this._currentToolCode] : void 0;
  }
};
function re2() {
  return Object.create(se);
}
var se = {
  _DEFAULT_ARC_OFFSETS: { i: 0, j: 0, a: 0 },
  _previousPoint: { x: 0, y: 0 },
  use(t2, e2) {
    let n2 = this._DEFAULT_ARC_OFFSETS, r3 = this._previousPoint, c4 = r3;
    if (t2.type === ye) {
      const { coordinates: s3 } = t2, o3 = R2(s3.x0, r3.x, e2), i4 = R2(s3.y0, r3.y, e2), a2 = R2(s3.x, o3, e2), p3 = R2(s3.y, i4, e2), f4 = R2(s3.i, 0, e2), u3 = R2(s3.j, 0, e2), l2 = R2(s3.a, 0, e2);
      (r3.x !== o3 || r3.y !== i4) && (r3 = { x: o3, y: i4 }), (c4.x !== a2 || c4.y !== p3) && (c4 = { x: a2, y: p3 }), (f4 !== 0 || u3 !== 0 || l2 !== 0) && (n2 = { i: f4, j: u3, a: l2 });
    }
    return this._previousPoint = c4, { startPoint: r3, endPoint: c4, arcOffsets: n2 };
  }
};
function R2(t2, e2, n2) {
  if (typeof t2 != "string")
    return e2;
  if (t2.includes(".") || t2 === "0")
    return Number(t2);
  const { coordinateFormat: r3, zeroSuppression: c4 } = n2, [s3, o3] = r3, [i4, a2] = t2.startsWith("+") || t2.startsWith("-") ? [t2[0], t2.slice(1)] : ["+", t2], p3 = s3 + o3, f4 = c4 === Pe ? a2.padEnd(p3, "0") : a2.padStart(p3, "0"), u3 = f4.slice(0, s3), l2 = f4.slice(s3);
  return Number(`${i4}${u3}.${l2}`);
}
function et(t2, e2) {
  const { x: n2, y: r3 } = e2;
  switch (t2.type) {
    case me: {
      const { diameter: c4 } = t2;
      return { type: S2, cx: n2, cy: r3, r: c4 / 2 };
    }
    case De:
    case Et: {
      const { xSize: c4, ySize: s3 } = t2, o3 = c4 / 2, i4 = s3 / 2, a2 = {
        type: H,
        x: n2 - o3,
        y: r3 - i4,
        xSize: c4,
        ySize: s3
      };
      return t2.type === Et && (a2.r = Math.min(o3, i4)), a2;
    }
    case yt: {
      const { diameter: c4, rotation: s3, vertices: o3 } = t2, i4 = c4 / 2, a2 = ut2(s3 ?? 0), p3 = A / o3, f4 = Array.from({ length: o3 }).map(
        (u3, l2) => {
          const y3 = p3 * l2 + a2, h2 = n2 + i4 * Math.cos(y3), _4 = r3 + i4 * Math.sin(y3);
          return [h2, _4];
        }
      );
      return { type: M2, points: f4 };
    }
  }
}
function k2(t2) {
  if (t2.type === S2) {
    const { cx: e2, cy: n2, r: r3 } = t2;
    return [
      {
        type: g2,
        start: [e2 + r3, n2, 0],
        end: [e2 + r3, n2, A],
        center: [e2, n2],
        radius: r3
      }
    ];
  }
  if (t2.type === H) {
    const { x: e2, y: n2, xSize: r3, ySize: c4, r: s3 } = t2;
    return s3 === r3 / 2 ? [
      {
        type: O,
        start: [e2 + r3, n2 + s3],
        end: [e2 + r3, n2 + c4 - s3]
      },
      {
        type: g2,
        start: [e2 + r3, n2 + c4 - s3, 0],
        end: [e2, n2 + c4 - s3, T],
        center: [e2 + s3, n2 + c4 - s3],
        radius: s3
      },
      { type: O, start: [e2, n2 + c4 - s3], end: [e2, n2 + s3] },
      {
        type: g2,
        start: [e2, n2 + s3, T],
        end: [e2 + r3, n2 + s3, A],
        center: [e2 + s3, n2 + s3],
        radius: s3
      }
    ] : s3 === c4 / 2 ? [
      { type: O, start: [e2 + s3, n2], end: [e2 + r3 - s3, n2] },
      {
        type: g2,
        start: [e2 + r3 - s3, n2, -P],
        end: [e2 + r3 - s3, n2 + c4, P],
        center: [e2 + r3 - s3, n2 + s3],
        radius: s3
      },
      {
        type: O,
        start: [e2 + r3 - s3, n2 + c4],
        end: [e2 + s3, n2 + c4]
      },
      {
        type: g2,
        start: [e2 + s3, n2 + c4, P],
        end: [e2 + s3, n2, at],
        center: [e2 + s3, n2 + s3],
        radius: s3
      }
    ] : [
      { type: O, start: [e2, n2], end: [e2 + r3, n2] },
      { type: O, start: [e2 + r3, n2], end: [e2 + r3, n2 + c4] },
      { type: O, start: [e2 + r3, n2 + c4], end: [e2, n2 + c4] },
      { type: O, start: [e2, n2 + c4], end: [e2, n2] }
    ];
  }
  return t2.type === M2 ? t2.points.map((e2, n2) => {
    const r3 = n2 < t2.points.length - 1 ? n2 + 1 : 0;
    return { type: O, start: e2, end: t2.points[r3] };
  }) : t2.segments;
}
function ce2(t2, e2) {
  const { shape: n2, hole: r3 } = t2, c4 = et(n2, e2.endPoint), s3 = r3 ? et(r3, e2.endPoint) : void 0;
  return s3 === void 0 ? c4 : {
    type: z2,
    segments: [...k2(c4), ...k2(s3)]
  };
}
function oe2(t2, e2) {
  const n2 = t2.filter((r3) => r3.type === O).map((r3) => ie(r3, e2));
  return { type: v, shape: { type: Y, shapes: n2 } };
}
function ie(t2, e2) {
  const { start: n2, end: r3 } = t2, [c4, s3] = n2, [o3, i4] = r3, [a2, p3] = [e2.xSize / 2, e2.ySize / 2], f4 = Math.atan2(i4 - s3, o3 - i4), [u3, l2] = [c4 - a2, c4 + a2], [y3, h2] = [s3 - p3, s3 + p3], [_4, E3] = [o3 - a2, o3 + a2], [m4, x3] = [i4 - p3, i4 + p3];
  let d = [];
  return pt2(n2, r3) ? d = [
    [u3, y3],
    [l2, y3],
    [E3, m4],
    [E3, x3],
    [_4, x3],
    [u3, h2]
  ] : f4 >= 0 && f4 < P ? d = [
    [u3, y3],
    [l2, y3],
    [E3, m4],
    [E3, x3],
    [_4, x3],
    [u3, h2]
  ] : f4 >= P && f4 <= T ? d = [
    [l2, y3],
    [l2, h2],
    [E3, x3],
    [_4, x3],
    [_4, m4],
    [u3, y3]
  ] : f4 >= -T && f4 < -P ? d = [
    [l2, h2],
    [u3, h2],
    [_4, x3],
    [_4, m4],
    [E3, m4],
    [l2, y3]
  ] : d = [
    [u3, h2],
    [u3, y3],
    [_4, m4],
    [E3, m4],
    [E3, x3],
    [l2, h2]
  ], { type: M2, points: d };
}
var _t2 = "cw";
var Q2 = "ccw";
function nt(t2, e2, n2) {
  return e2 === void 0 ? xt2(t2) : ae2(t2, e2, n2);
}
function rt(t2, e2, n2 = false) {
  if (t2.length > 0) {
    if (n2)
      return { type: Kt2, segments: t2 };
    if ((e2 == null ? void 0 : e2.type) === b2 && e2.shape.type === S2)
      return { type: it2, width: e2.shape.diameter, segments: t2 };
    if ((e2 == null ? void 0 : e2.type) === b2 && e2.shape.type === H)
      return oe2(t2, e2.shape);
  }
}
function xt2(t2) {
  return {
    type: O,
    start: [t2.startPoint.x, t2.startPoint.y],
    end: [t2.endPoint.x, t2.endPoint.y]
  };
}
function ae2(t2, e2, n2 = false) {
  const { startPoint: r3, endPoint: c4, arcOffsets: s3 } = t2, o3 = s3.a > 0 ? s3.a : (s3.i ** 2 + s3.j ** 2) ** 0.5;
  if (n2 || s3.a > 0) {
    if (r3.x === c4.x && r3.y === c4.y)
      return xt2(t2);
    const [u3, l2, y3] = ue2(t2, o3).map((h2) => D2(r3, c4, h2, e2)).sort(([h2, _4], [E3, m4]) => {
      const x3 = Math.abs(_4[2] - h2[2]), d = Math.abs(m4[2] - E3[2]);
      return x3 - d;
    })[0];
    return { type: g2, start: u3, end: l2, center: y3, radius: o3 };
  }
  const i4 = {
    x: r3.x + s3.i,
    y: r3.y + s3.j
  }, [a2, p3, f4] = D2(
    r3,
    c4,
    i4,
    e2
  );
  return { type: g2, start: a2, end: p3, center: f4, radius: o3 };
}
function D2(t2, e2, n2, r3) {
  let c4 = Math.atan2(
    t2.y - n2.y,
    t2.x - n2.x
  ), s3 = Math.atan2(
    e2.y - n2.y,
    e2.x - n2.x
  );
  return r3 === Q2 ? s3 = s3 > c4 ? s3 : s3 + A : c4 = c4 > s3 ? c4 : c4 + A, [
    [t2.x, t2.y, c4],
    [e2.x, e2.y, s3],
    [n2.x, n2.y]
  ];
}
function ue2(t2, e2) {
  const { x: n2, y: r3 } = t2.startPoint, { x: c4, y: s3 } = t2.endPoint, [o3, i4] = [c4 - n2, s3 - r3], [a2, p3] = [c4 + n2, s3 + r3], f4 = Math.sqrt(o3 ** 2 + i4 ** 2);
  if (e2 <= f4 / 2)
    return [{ x: n2 + o3 / 2, y: r3 + i4 / 2 }];
  const u3 = Math.sqrt(4 * e2 ** 2 / f4 ** 2 - 1), [l2, y3] = [a2 / 2, p3 / 2], [h2, _4] = [i4 * u3 / 2, o3 * u3 / 2];
  return [
    { x: l2 + h2, y: y3 - _4 },
    { x: l2 - h2, y: y3 + _4 }
  ];
}
function pe2(t2, e2) {
  const n2 = [], r3 = Object.fromEntries(
    t2.variableValues.map((c4, s3) => [`$${s3 + 1}`, c4])
  );
  for (const c4 of t2.macro)
    if (c4.type === kt && (r3[c4.name] = w(c4.value, r3)), c4.type === Ft) {
      const s3 = [e2.endPoint.x, e2.endPoint.y], o3 = c4.parameters.map((i4) => w(i4, r3));
      n2.push(...fe2(c4.code, s3, o3));
    }
  return { type: Y, shapes: n2 };
}
function w(t2, e2) {
  if (typeof t2 == "number")
    return t2;
  if (typeof t2 == "string")
    return e2[t2];
  const n2 = w(t2.left, e2), r3 = w(t2.right, e2);
  switch (t2.operator) {
    case "+":
      return n2 + r3;
    case "-":
      return n2 - r3;
    case "x":
      return n2 * r3;
    case "/":
      return n2 / r3;
  }
}
function fe2(t2, e2, n2) {
  switch (t2) {
    case Mn:
      return [ye2(e2, n2)];
    case Nn:
    case Cn:
      return [he2(e2, n2)];
    case _n:
      return [le2(e2, n2)];
    case xn:
      return [de2(e2, n2)];
    case wn:
      return [_e2(e2, n2)];
    case Ln:
      return [xe2(e2, n2)];
    case In:
      return me2(e2, n2);
    case Sn:
      return [Ee2(e2, n2)];
  }
  return [];
}
function ye2(t2, e2) {
  const [n2, r3, c4, s3, o3] = e2, i4 = r3 / 2, [a2, p3] = C2([c4, s3], t2, o3);
  return { type: S2, erase: n2 === 0, cx: a2, cy: p3, r: i4 };
}
function he2(t2, e2) {
  const [n2, r3, c4, s3, o3, i4, a2] = e2, [p3, f4] = [i4 - s3, o3 - c4], u3 = r3 / 2, l2 = Math.sqrt(p3 ** 2 + f4 ** 2), [y3, h2] = [u3 * f4 / l2, u3 * p3 / l2];
  return {
    type: M2,
    erase: n2 === 0,
    points: [
      [c4 + y3, s3 - h2],
      [o3 + y3, i4 - h2],
      [o3 - y3, i4 + h2],
      [c4 - y3, s3 + h2]
    ].map((_4) => C2(_4, t2, a2))
  };
}
function le2(t2, e2) {
  const [n2, r3, c4, s3, o3, i4] = e2, [a2, p3] = [r3 / 2, c4 / 2];
  return {
    type: M2,
    erase: n2 === 0,
    points: [
      [s3 - a2, o3 - p3],
      [s3 + a2, o3 - p3],
      [s3 + a2, o3 + p3],
      [s3 - a2, o3 + p3]
    ].map((f4) => C2(f4, t2, i4))
  };
}
function de2(t2, e2) {
  const [n2, r3, c4, s3, o3, i4] = e2;
  return {
    type: M2,
    erase: n2 === 0,
    points: [
      [s3, o3],
      [s3 + r3, o3],
      [s3 + r3, o3 + c4],
      [s3, o3 + c4]
    ].map((a2) => C2(a2, t2, i4))
  };
}
function _e2(t2, e2) {
  const [n2, , ...r3] = e2.slice(0, -1), c4 = e2[e2.length - 1];
  return {
    type: M2,
    erase: n2 === 0,
    points: r3.flatMap(
      (s3, o3) => o3 % 2 === 1 ? [[r3[o3 - 1], s3]] : []
    ).map((s3) => C2(s3, t2, c4))
  };
}
function xe2(t2, e2) {
  const [n2, r3, c4, s3, o3, i4] = e2, a2 = o3 / 2, p3 = 2 * T / r3, f4 = [];
  let u3;
  for (u3 = 0; u3 < r3; u3++) {
    const l2 = p3 * u3, y3 = c4 + a2 * Math.cos(l2), h2 = s3 + a2 * Math.sin(l2);
    f4.push(C2([y3, h2], t2, i4));
  }
  return { type: M2, erase: n2 === 0, points: f4 };
}
function me2(t2, e2) {
  const n2 = (x3) => C2(x3, t2, e2[8]), [r3, c4, s3, o3, i4, a2, p3, f4] = e2, [u3, l2] = n2([r3, c4]), y3 = p3 / 2, h2 = f4 / 2, _4 = [];
  let E3 = 0, m4 = s3;
  for (; m4 >= 0 && E3 < a2; ) {
    const x3 = m4 / 2, d = x3 - o3;
    _4.push(x3), d > 0 && _4.push(d), E3 += 1, m4 = 2 * (d - i4);
  }
  return [
    {
      type: z2,
      segments: _4.flatMap((x3) => k2({ type: S2, cx: u3, cy: l2, r: x3 }))
    },
    // Vertical stroke
    {
      type: M2,
      points: [
        [r3 - y3, c4 - h2],
        [r3 + y3, c4 - h2],
        [r3 + y3, c4 + h2],
        [r3 - y3, c4 + h2]
      ].map(n2)
    },
    // Horizontal stroke
    {
      type: M2,
      points: [
        [r3 - h2, c4 - y3],
        [r3 + h2, c4 - y3],
        [r3 + h2, c4 + y3],
        [r3 - h2, c4 + y3]
      ].map(n2)
    }
  ];
}
function Ee2(t2, e2) {
  const [n2, r3, c4, s3, o3, i4] = e2, a2 = C2([n2, r3], t2, i4), [p3, f4] = [c4 / 2, s3 / 2], u3 = o3 / 2, l2 = p3 ** 2 - u3 ** 2, y3 = f4 ** 2 - u3 ** 2, h2 = Math.sqrt(l2), _4 = y3 >= 0 ? Math.sqrt(y3) : u3, E3 = [0, 90, 180, 270], m4 = [];
  for (const x3 of E3) {
    const d = [
      [_4, u3],
      [h2, u3],
      [u3, h2],
      [u3, _4]
    ].map((L4) => C2(L4, [n2, r3], x3)).map((L4) => C2(L4, t2, i4)), [Et2, Ot2, Mt3] = D2(
      { x: d[1][0], y: d[1][1] },
      { x: d[2][0], y: d[2][1] },
      { x: a2[0], y: a2[1] },
      Q2
    );
    if (m4.push(
      { type: O, start: d[0], end: d[1] },
      { type: g2, start: Et2, end: Ot2, center: Mt3, radius: p3 },
      { type: O, start: d[2], end: d[3] }
    ), !pt2(d[0], d[3])) {
      const [L4, gt3, At3] = D2(
        { x: d[3][0], y: d[3][1] },
        { x: d[0][0], y: d[0][1] },
        { x: a2[0], y: a2[1] },
        _t2
      );
      m4.push({
        type: g2,
        start: L4,
        end: gt3,
        center: At3,
        radius: f4
      });
    }
  }
  return { type: z2, segments: m4 };
}
function Oe(t2) {
  const e2 = Object.create(Me2);
  return t2 === pe ? Object.assign(e2, ge) : e2;
}
var Me2 = {
  _currentPath: void 0,
  _arcDirection: void 0,
  _ambiguousArcCenter: false,
  _regionMode: false,
  _defaultGraphic: void 0,
  plot(t2, e2, n2) {
    const r3 = [], c4 = this._setGraphicState(t2), s3 = this._plotCurrentPath(t2, e2, c4);
    if (s3 && r3.push(s3), c4 === Ot && (e2 == null ? void 0 : e2.type) === b2 && r3.push({ type: v, shape: ce2(e2, n2) }), c4 === Ot && (e2 == null ? void 0 : e2.type) === dt2 && r3.push({ type: v, shape: pe2(e2, n2) }), c4 === gt && (this._currentPath = this._currentPath ?? {
      segments: [],
      region: this._regionMode,
      tool: e2
    }, this._currentPath.segments.push(
      nt(n2, this._arcDirection, this._ambiguousArcCenter)
    )), c4 === Tt) {
      const o3 = rt([nt(n2)], e2);
      o3 && r3.push(o3);
    }
    return r3;
  },
  _setGraphicState(t2) {
    if (t2.type === oe && (this._arcDirection = mt2(t2.mode)), t2.type === qt && (this._ambiguousArcCenter = t2.quadrant === Nt), t2.type === Bt && (this._regionMode = t2.region), t2.type === ye)
      return t2.graphic === gt ? this._defaultGraphic = gt : t2.graphic !== null && (this._defaultGraphic = void 0), t2.graphic ?? this._defaultGraphic;
  },
  _plotCurrentPath(t2, e2, n2) {
    if (this._currentPath !== void 0 && (e2 !== this._currentPath.tool || t2.type === Bt || t2.type === ze || n2 === Ge && this._currentPath.region || n2 === Ot && this._currentPath !== void 0)) {
      const r3 = rt(
        this._currentPath.segments,
        this._currentPath.tool,
        this._currentPath.region
      );
      return this._currentPath = void 0, r3;
    }
  }
};
var ge = {
  _defaultGraphic: Ot,
  _ambiguousArcCenter: true,
  _setGraphicState(t2) {
    if (t2.type === oe) {
      const { mode: e2 } = t2;
      this._arcDirection = mt2(e2), e2 === Mt || e2 === Ct || e2 === At ? this._defaultGraphic = gt : e2 === Ge ? this._defaultGraphic = Ge : this._defaultGraphic = Ot;
    }
    if (t2.type === ye)
      return t2.graphic ?? this._defaultGraphic;
  }
};
function mt2(t2) {
  if (t2 === Ct)
    return Q2;
  if (t2 === Mt)
    return _t2;
}
function Pe2(t2) {
  const e2 = te2(t2), n2 = ee(), r3 = re2(), c4 = Oe(t2.filetype), s3 = [];
  for (const o3 of t2.children) {
    const i4 = n2.use(o3), a2 = r3.use(o3, e2), p3 = c4.plot(o3, i4, a2);
    s3.push(...p3);
  }
  return {
    type: Jt2,
    units: e2.units,
    size: ht2(s3),
    children: s3
  };
}

// node_modules/@tracespace/xml-id/dist/tracespace-xml-id.js
var o = "_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
var u = `-0123456789${o}`;
var s = new RegExp(`^[^${o}]|[^\\${u}]`, "g");
var r = 12;
function R3(n2 = r) {
  return n2 = n2 || r, c(1, o) + c(n2 - 1, u);
}
function c(n2, t2) {
  const i4 = t2.length;
  let e2 = "";
  for (; n2 > 0; )
    n2--, e2 += t2[Math.floor(Math.random() * i4)];
  return e2;
}

// node_modules/@tracespace/renderer/dist/tracespace-renderer.js
var x2 = class {
  /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */
  constructor(l2, t2, o3) {
    this.property = l2, this.normal = t2, o3 && (this.space = o3);
  }
};
x2.prototype.property = {};
x2.prototype.normal = {};
x2.prototype.space = null;
function z3(n2, l2) {
  const t2 = {}, o3 = {};
  let r3 = -1;
  for (; ++r3 < n2.length; )
    Object.assign(t2, n2[r3].property), Object.assign(o3, n2[r3].normal);
  return new x2(t2, o3, l2);
}
function v2(n2) {
  return n2.toLowerCase();
}
var m = class {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */
  constructor(l2, t2) {
    this.property = l2, this.attribute = t2;
  }
};
m.prototype.space = null;
m.prototype.boolean = false;
m.prototype.booleanish = false;
m.prototype.overloadedBoolean = false;
m.prototype.number = false;
m.prototype.commaSeparated = false;
m.prototype.spaceSeparated = false;
m.prototype.commaOrSpaceSeparated = false;
m.prototype.mustUseProperty = false;
m.prototype.defined = false;
var un2 = 0;
var i = S3();
var c2 = S3();
var F2 = S3();
var e = S3();
var s2 = S3();
var k3 = S3();
var g3 = S3();
function S3() {
  return 2 ** ++un2;
}
var P2 = Object.freeze(Object.defineProperty({
  __proto__: null,
  boolean: i,
  booleanish: c2,
  commaOrSpaceSeparated: g3,
  commaSeparated: k3,
  number: e,
  overloadedBoolean: F2,
  spaceSeparated: s2
}, Symbol.toStringTag, { value: "Module" }));
var C3 = Object.keys(P2);
var D3 = class extends m {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  constructor(l2, t2, o3, r3) {
    let u3 = -1;
    if (super(l2, t2), R4(this, "space", r3), typeof o3 == "number")
      for (; ++u3 < C3.length; ) {
        const a2 = C3[u3];
        R4(this, C3[u3], (o3 & P2[a2]) === P2[a2]);
      }
  }
};
D3.prototype.defined = true;
function R4(n2, l2, t2) {
  t2 && (n2[l2] = t2);
}
var sn2 = {}.hasOwnProperty;
function b3(n2) {
  const l2 = {}, t2 = {};
  let o3;
  for (o3 in n2.properties)
    if (sn2.call(n2.properties, o3)) {
      const r3 = n2.properties[o3], u3 = new D3(
        o3,
        n2.transform(n2.attributes || {}, o3),
        r3,
        n2.space
      );
      n2.mustUseProperty && n2.mustUseProperty.includes(o3) && (u3.mustUseProperty = true), l2[o3] = u3, t2[v2(o3)] = o3, t2[v2(u3.attribute)] = o3;
    }
  return new x2(l2, t2, n2.space);
}
var H2 = b3({
  space: "xlink",
  transform(n2, l2) {
    return "xlink:" + l2.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});
var $3 = b3({
  space: "xml",
  transform(n2, l2) {
    return "xml:" + l2.slice(3).toLowerCase();
  },
  properties: { xmlLang: null, xmlBase: null, xmlSpace: null }
});
function j2(n2, l2) {
  return l2 in n2 ? n2[l2] : l2;
}
function V2(n2, l2) {
  return j2(n2, l2.toLowerCase());
}
var _ = b3({
  space: "xmlns",
  attributes: { xmlnsxlink: "xmlns:xlink" },
  transform: V2,
  properties: { xmlns: null, xmlnsXLink: null }
});
var G2 = b3({
  transform(n2, l2) {
    return l2 === "role" ? l2 : "aria-" + l2.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: c2,
    ariaAutoComplete: null,
    ariaBusy: c2,
    ariaChecked: c2,
    ariaColCount: e,
    ariaColIndex: e,
    ariaColSpan: e,
    ariaControls: s2,
    ariaCurrent: null,
    ariaDescribedBy: s2,
    ariaDetails: null,
    ariaDisabled: c2,
    ariaDropEffect: s2,
    ariaErrorMessage: null,
    ariaExpanded: c2,
    ariaFlowTo: s2,
    ariaGrabbed: c2,
    ariaHasPopup: null,
    ariaHidden: c2,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: s2,
    ariaLevel: e,
    ariaLive: null,
    ariaModal: c2,
    ariaMultiLine: c2,
    ariaMultiSelectable: c2,
    ariaOrientation: null,
    ariaOwns: s2,
    ariaPlaceholder: null,
    ariaPosInSet: e,
    ariaPressed: c2,
    ariaReadOnly: c2,
    ariaRelevant: null,
    ariaRequired: c2,
    ariaRoleDescription: s2,
    ariaRowCount: e,
    ariaRowIndex: e,
    ariaRowSpan: e,
    ariaSelected: c2,
    ariaSetSize: e,
    ariaSort: null,
    ariaValueMax: e,
    ariaValueMin: e,
    ariaValueNow: e,
    ariaValueText: null,
    role: null
  }
});
var cn2 = b3({
  space: "html",
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  transform: V2,
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: k3,
    acceptCharset: s2,
    accessKey: s2,
    action: null,
    allow: null,
    allowFullScreen: i,
    allowPaymentRequest: i,
    allowUserMedia: i,
    alt: null,
    as: null,
    async: i,
    autoCapitalize: null,
    autoComplete: s2,
    autoFocus: i,
    autoPlay: i,
    capture: i,
    charSet: null,
    checked: i,
    cite: null,
    className: s2,
    cols: e,
    colSpan: null,
    content: null,
    contentEditable: c2,
    controls: i,
    controlsList: s2,
    coords: e | k3,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: i,
    defer: i,
    dir: null,
    dirName: null,
    disabled: i,
    download: F2,
    draggable: c2,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: i,
    formTarget: null,
    headers: s2,
    height: e,
    hidden: i,
    high: e,
    href: null,
    hrefLang: null,
    htmlFor: s2,
    httpEquiv: s2,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: i,
    itemId: null,
    itemProp: s2,
    itemRef: s2,
    itemScope: i,
    itemType: s2,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: i,
    low: e,
    manifest: null,
    max: null,
    maxLength: e,
    media: null,
    method: null,
    min: null,
    minLength: e,
    multiple: i,
    muted: i,
    name: null,
    nonce: null,
    noModule: i,
    noValidate: i,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: i,
    optimum: e,
    pattern: null,
    ping: s2,
    placeholder: null,
    playsInline: i,
    poster: null,
    preload: null,
    readOnly: i,
    referrerPolicy: null,
    rel: s2,
    required: i,
    reversed: i,
    rows: e,
    rowSpan: e,
    sandbox: s2,
    scope: null,
    scoped: i,
    seamless: i,
    selected: i,
    shape: null,
    size: e,
    sizes: null,
    slot: null,
    span: e,
    spellCheck: c2,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: e,
    step: null,
    style: null,
    tabIndex: e,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: i,
    useMap: null,
    value: c2,
    width: e,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: s2,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: e,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: e,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: i,
    // Lists. Use CSS to reduce space between items instead
    declare: i,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: e,
    // `<img>` and `<object>`
    leftMargin: e,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: e,
    // `<body>`
    marginWidth: e,
    // `<body>`
    noResize: i,
    // `<frame>`
    noHref: i,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: i,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: i,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: e,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: c2,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: e,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: e,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: i,
    disableRemotePlayback: i,
    prefix: null,
    property: null,
    results: e,
    security: null,
    unselectable: null
  }
});
var pn2 = b3({
  space: "svg",
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  transform: j2,
  properties: {
    about: g3,
    accentHeight: e,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: e,
    amplitude: e,
    arabicForm: null,
    ascent: e,
    attributeName: null,
    attributeType: null,
    azimuth: e,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: e,
    by: null,
    calcMode: null,
    capHeight: e,
    className: s2,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: e,
    diffuseConstant: e,
    direction: null,
    display: null,
    dur: null,
    divisor: e,
    dominantBaseline: null,
    download: i,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: e,
    enableBackground: null,
    end: null,
    event: null,
    exponent: e,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: e,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: k3,
    g2: k3,
    glyphName: k3,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: e,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: e,
    horizOriginX: e,
    horizOriginY: e,
    id: null,
    ideographic: e,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: e,
    k: e,
    k1: e,
    k2: e,
    k3: e,
    k4: e,
    kernelMatrix: g3,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: e,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: e,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: e,
    overlineThickness: e,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: e,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: s2,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: e,
    pointsAtY: e,
    pointsAtZ: e,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: g3,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: g3,
    rev: g3,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: g3,
    requiredFeatures: g3,
    requiredFonts: g3,
    requiredFormats: g3,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: e,
    specularExponent: e,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: e,
    strikethroughThickness: e,
    string: null,
    stroke: null,
    strokeDashArray: g3,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: e,
    strokeOpacity: e,
    strokeWidth: null,
    style: null,
    surfaceScale: e,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: g3,
    tabIndex: e,
    tableValues: null,
    target: null,
    targetX: e,
    targetY: e,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: g3,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: e,
    underlineThickness: e,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: e,
    values: null,
    vAlphabetic: e,
    vMathematical: e,
    vectorEffect: null,
    vHanging: e,
    vIdeographic: e,
    version: null,
    vertAdvY: e,
    vertOriginX: e,
    vertOriginY: e,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: e,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});
var dn2 = /^data[-\w.:]+$/i;
var T2 = /-[a-z]/g;
var gn2 = /[A-Z]/g;
function hn2(n2, l2) {
  const t2 = v2(l2);
  let o3 = l2, r3 = m;
  if (t2 in n2.normal)
    return n2.property[n2.normal[t2]];
  if (t2.length > 4 && t2.slice(0, 4) === "data" && dn2.test(l2)) {
    if (l2.charAt(4) === "-") {
      const u3 = l2.slice(5).replace(T2, mn2);
      o3 = "data" + u3.charAt(0).toUpperCase() + u3.slice(1);
    } else {
      const u3 = l2.slice(4);
      if (!T2.test(u3)) {
        let a2 = u3.replace(gn2, fn2);
        a2.charAt(0) !== "-" && (a2 = "-" + a2), l2 = "data" + a2;
      }
    }
    r3 = D3;
  }
  return new r3(o3, l2);
}
function fn2(n2) {
  return "-" + n2.toLowerCase();
}
function mn2(n2) {
  return n2.charAt(1).toUpperCase();
}
z3([$3, H2, _, G2, cn2], "html");
var yn2 = z3([$3, H2, _, G2, pn2], "svg");
var I2 = /[#.]/g;
function Sn2(n2, l2) {
  const t2 = n2 || "", o3 = {};
  let r3 = 0, u3, a2;
  for (; r3 < t2.length; ) {
    I2.lastIndex = r3;
    const d = I2.exec(t2), h2 = t2.slice(r3, d ? d.index : t2.length);
    h2 && (u3 ? u3 === "#" ? o3.id = h2 : Array.isArray(o3.className) ? o3.className.push(h2) : o3.className = [h2] : a2 = h2, r3 += h2.length), d && (u3 = d[0], r3++);
  }
  return {
    type: "element",
    // @ts-expect-error: fine.
    tagName: a2 || l2 || "div",
    properties: o3,
    children: []
  };
}
function U2(n2) {
  const l2 = String(n2 || "").trim();
  return l2 ? l2.split(/[ \t\n\r\f]+/g) : [];
}
function N2(n2) {
  const l2 = [], t2 = String(n2 || "");
  let o3 = t2.indexOf(","), r3 = 0, u3 = false;
  for (; !u3; ) {
    o3 === -1 && (o3 = t2.length, u3 = true);
    const a2 = t2.slice(r3, o3).trim();
    (a2 || !u3) && l2.push(a2), r3 = o3 + 1, o3 = t2.indexOf(",", r3);
  }
  return l2;
}
var kn = /* @__PURE__ */ new Set(["menu", "submit", "reset", "button"]);
var M3 = {}.hasOwnProperty;
function bn2(n2, l2, t2) {
  const o3 = t2 && wn2(t2);
  return (
    /**
     * @type {{
     *   (): Root
     *   (selector: null | undefined, ...children: Array<HChild>): Root
     *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element
     *   (selector: string, ...children: Array<HChild>): Element
     * }}
     */
    /**
     * Hyperscript compatible DSL for creating virtual hast trees.
     *
     * @param {string | null} [selector]
     * @param {HProperties | HChild} [properties]
     * @param {Array<HChild>} children
     * @returns {HResult}
     */
    function(u3, a2, ...d) {
      let h2 = -1, p3;
      if (u3 == null)
        p3 = { type: "root", children: [] }, d.unshift(a2);
      else if (p3 = Sn2(u3, l2), p3.tagName = p3.tagName.toLowerCase(), o3 && M3.call(o3, p3.tagName) && (p3.tagName = o3[p3.tagName]), vn2(a2, p3.tagName)) {
        let y3;
        for (y3 in a2)
          M3.call(a2, y3) && xn2(n2, p3.properties, y3, a2[y3]);
      } else
        d.unshift(a2);
      for (; ++h2 < d.length; )
        L(p3.children, d[h2]);
      return p3.type === "element" && p3.tagName === "template" && (p3.content = { type: "root", children: p3.children }, p3.children = []), p3;
    }
  );
}
function vn2(n2, l2) {
  return n2 == null || typeof n2 != "object" || Array.isArray(n2) ? false : l2 === "input" || !n2.type || typeof n2.type != "string" ? true : "children" in n2 && Array.isArray(n2.children) ? false : l2 === "button" ? kn.has(n2.type.toLowerCase()) : !("value" in n2);
}
function xn2(n2, l2, t2, o3) {
  const r3 = hn2(n2, t2);
  let u3 = -1, a2;
  if (o3 != null) {
    if (typeof o3 == "number") {
      if (Number.isNaN(o3))
        return;
      a2 = o3;
    } else
      typeof o3 == "boolean" ? a2 = o3 : typeof o3 == "string" ? r3.spaceSeparated ? a2 = U2(o3) : r3.commaSeparated ? a2 = N2(o3) : r3.commaOrSpaceSeparated ? a2 = U2(N2(o3).join(" ")) : a2 = B2(r3, r3.property, o3) : Array.isArray(o3) ? a2 = o3.concat() : a2 = r3.property === "style" ? Cn2(o3) : String(o3);
    if (Array.isArray(a2)) {
      const d = [];
      for (; ++u3 < a2.length; )
        d[u3] = B2(r3, r3.property, a2[u3]);
      a2 = d;
    }
    r3.property === "className" && Array.isArray(l2.className) && (a2 = l2.className.concat(a2)), l2[r3.property] = a2;
  }
}
function L(n2, l2) {
  let t2 = -1;
  if (l2 != null)
    if (typeof l2 == "string" || typeof l2 == "number")
      n2.push({ type: "text", value: String(l2) });
    else if (Array.isArray(l2))
      for (; ++t2 < l2.length; )
        L(n2, l2[t2]);
    else if (typeof l2 == "object" && "type" in l2)
      l2.type === "root" ? L(n2, l2.children) : n2.push(l2);
    else
      throw new Error("Expected node, nodes, or string, got `" + l2 + "`");
}
function B2(n2, l2, t2) {
  if (typeof t2 == "string") {
    if (n2.number && t2 && !Number.isNaN(Number(t2)))
      return Number(t2);
    if ((n2.boolean || n2.overloadedBoolean) && (t2 === "" || v2(t2) === v2(l2)))
      return true;
  }
  return t2;
}
function Cn2(n2) {
  const l2 = [];
  let t2;
  for (t2 in n2)
    M3.call(n2, t2) && l2.push([t2, n2[t2]].join(": "));
  return l2.join("; ");
}
function wn2(n2) {
  const l2 = {};
  let t2 = -1;
  for (; ++t2 < n2.length; )
    l2[n2[t2].toLowerCase()] = n2[t2];
  return l2;
}
var Pn = [
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "solidColor",
  "textArea",
  "textPath"
];
var f = bn2(yn2, "g", Pn);
function W2(n2) {
  return n2.type === v ? Mn2(n2) : Ln2(n2);
}
function Mn2(n2) {
  const { shape: l2 } = n2;
  return O2(l2);
}
function O2(n2) {
  switch (n2.type) {
    case S2: {
      const { cx: l2, cy: t2, r: o3 } = n2;
      return f("circle", { cx: l2, cy: -t2, r: o3 });
    }
    case H: {
      const { x: l2, y: t2, xSize: o3, ySize: r3, r: u3 } = n2;
      return f("rect", {
        x: l2,
        y: -t2 - r3,
        width: o3,
        height: r3,
        rx: u3,
        ry: u3
      });
    }
    case M2: {
      const l2 = n2.points.map(([t2, o3]) => `${t2},${-o3}`).join(" ");
      return f("polygon", { points: l2 });
    }
    case z2:
      return f("path", { d: q2(n2.segments) });
    case Y: {
      const l2 = Ce2.fromShape(n2), t2 = R3(), o3 = [];
      let r3 = [];
      for (const [u3, a2] of n2.shapes.entries())
        if (a2.erase && !Ce2.isEmpty(l2)) {
          const d = `${t2}__${u3}`;
          o3.push(f("clipPath", { id: d }, [O2(a2)])), r3 = [f("g", { clipPath: `url(#${d})` }, r3)];
        } else
          r3.push(O2(a2));
      return o3.length > 0 && r3.unshift(f("defs", o3)), r3.length === 1 ? r3[0] : f("g", r3);
    }
    default:
      return f("g");
  }
}
function Ln2(n2) {
  const l2 = q2(n2.segments), t2 = n2.type === it2 ? { strokeWidth: n2.width, fill: "none" } : {};
  return f("path", { ...t2, d: l2 });
}
function q2(n2) {
  const l2 = [];
  for (const [t2, o3] of n2.entries()) {
    const r3 = n2[t2 - 1], { start: u3, end: a2 } = o3;
    if ((!r3 || !pt2(r3.end, u3)) && l2.push(`M${u3[0]} ${-u3[1]}`), o3.type === O)
      l2.push(`L${a2[0]} ${-a2[1]}`);
    else if (o3.type === g2) {
      const d = o3.end[2] - o3.start[2], h2 = Math.abs(d), { center: p3, radius: y3 } = o3, A4 = d < 0 ? "1" : "0";
      let E3 = h2 <= Math.PI ? "0" : "1";
      if (h2 === 2 * Math.PI) {
        const [K, Y3] = [2 * p3[0] - a2[0], -(2 * p3[1] - a2[1])];
        E3 = "0", l2.push(`A${y3} ${y3} 0 0 ${A4} ${K} ${Y3}`);
      }
      l2.push(
        `A${y3} ${y3} 0 ${E3} ${A4} ${a2[0]} ${-a2[1]}`
      );
    }
  }
  return l2.join("");
}
var On2 = {
  version: "1.1",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
};
var Dn = {
  "stroke-linecap": "round",
  "stroke-linejoin": "round",
  "stroke-width": "0",
  "fill-rule": "evenodd",
  "clip-rule": "evenodd",
  fill: "currentColor",
  stroke: "currentColor"
};
function Tn2(n2, l2) {
  const { units: t2, size: o3, children: r3 } = n2;
  return l2 = l2 ?? An2(o3), f(
    "svg",
    {
      ...On2,
      ...Dn,
      viewBox: l2.join(" "),
      width: `${l2[2]}${t2}`,
      height: `${l2[3]}${t2}`
    },
    r3.map(W2)
  );
}
function In2(n2) {
  return f("g", {}, n2.children.map(W2));
}
function An2(n2) {
  return Ce2.isEmpty(n2) ? [0, 0, 0, 0] : [n2[0], -n2[3], n2[2] - n2[0], n2[3] - n2[1]];
}

// node_modules/@tracespace/identify-layers/dist/tracespace-identify-layers.js
function C4(t2) {
  let e2 = null, x3 = 0;
  const s3 = {};
  for (const d of t2) {
    const { cad: h2 } = d;
    if (h2 !== null) {
      const y3 = (s3[h2] ?? 0) + 1;
      y3 > x3 && (x3 = y3, e2 = h2), s3[h2] = y3;
    }
  }
  return e2;
}
var g4 = "copper";
var E = "soldermask";
var k4 = "silkscreen";
var A2 = "solderpaste";
var D4 = "drill";
var L2 = "outline";
var T3 = "drawing";
var _2 = "top";
var b4 = "bottom";
var P3 = "inner";
var f2 = "all";
var a = "kicad";
var m2 = "altium";
var I3 = "allegro";
var p = "eagle";
var c3 = "eagle-legacy";
var o2 = "eagle-oshpark";
var n = "eagle-pcbng";
var r2 = "geda-pcb";
var l = "orcad";
var i2 = "diptrace";
var u2 = [
  // High-priority non-matches
  {
    type: null,
    side: null,
    matchers: [
      // Eagle gerber generation metadata
      {
        ext: "gpi",
        cad: [p, c3, o2, n]
      },
      // Eagle drill generation metadata
      {
        ext: "dri",
        cad: [p, c3, o2, n]
      },
      // General data/BOM files
      { ext: "csv", cad: null },
      // Pick-n-place BOMs
      { match: /pnp_bom/, cad: n }
    ]
  },
  {
    type: g4,
    side: _2,
    matchers: [
      { ext: "cmp", cad: c3 },
      { ext: "top", cad: [c3, l] },
      { ext: "gtl", cad: [a, m2] },
      { ext: "toplayer\\.ger", cad: o2 },
      { match: /top\.\w+$/, cad: [r2, i2] },
      { match: /f[._]cu/, cad: a },
      { match: /copper_top/, cad: p },
      { match: /top_copper/, cad: n },
      { match: /top copper/, cad: null }
    ]
  },
  {
    type: E,
    side: _2,
    matchers: [
      { ext: "stc", cad: c3 },
      { ext: "tsm", cad: c3 },
      { ext: "gts", cad: [a, m2] },
      { ext: "smt", cad: l },
      { ext: "topsoldermask\\.ger", cad: o2 },
      { match: /topmask\.\w+$/, cad: [r2, i2] },
      { match: /f[._]mask/, cad: a },
      { match: /soldermask_top/, cad: p },
      { match: /top_mask/, cad: n },
      { match: /top solder resist/, cad: null }
    ]
  },
  {
    type: k4,
    side: _2,
    matchers: [
      { ext: "plc", cad: c3 },
      { ext: "tsk", cad: c3 },
      { ext: "gto", cad: [a, m2] },
      { ext: "sst", cad: l },
      { ext: "topsilkscreen\\.ger", cad: o2 },
      { match: /topsilk\.\w+$/, cad: [r2, i2] },
      { match: /f[._]silks/, cad: a },
      { match: /silkscreen_top/, cad: p },
      { match: /top_silk/, cad: n },
      { match: /top silk screen/, cad: null }
    ]
  },
  {
    type: A2,
    side: _2,
    matchers: [
      { ext: "crc", cad: c3 },
      { ext: "tsp", cad: c3 },
      { ext: "gtp", cad: [a, m2] },
      { ext: "spt", cad: l },
      { ext: "tcream\\.ger", cad: o2 },
      { match: /toppaste\.\w+$/, cad: [r2, i2] },
      { match: /f[._]paste/, cad: a },
      { match: /solderpaste_top/, cad: p },
      { match: /top_paste/, cad: n }
    ]
  },
  {
    type: g4,
    side: b4,
    matchers: [
      { ext: "sol", cad: c3 },
      { ext: "bot", cad: [c3, l] },
      { ext: "gbl", cad: [a, m2] },
      { ext: "bottomlayer\\.ger", cad: o2 },
      { match: /bottom\.\w+$/, cad: [r2, i2] },
      { match: /b[._]cu/, cad: a },
      { match: /copper_bottom/, cad: p },
      { match: /bottom_copper/, cad: n },
      { match: /bottom copper/, cad: null }
    ]
  },
  {
    type: E,
    side: b4,
    matchers: [
      { ext: "sts", cad: c3 },
      { ext: "bsm", cad: c3 },
      { ext: "gbs", cad: [a, m2] },
      { ext: "smb", cad: l },
      { ext: "bottomsoldermask\\.ger", cad: o2 },
      { match: /bottommask\.\w+$/, cad: [r2, i2] },
      { match: /b[._]mask/, cad: a },
      { match: /soldermask_bottom/, cad: p },
      { match: /bottom_mask/, cad: n },
      { match: /bottom solder resist/, cad: null }
    ]
  },
  {
    type: k4,
    side: b4,
    matchers: [
      { ext: "pls", cad: c3 },
      { ext: "bsk", cad: c3 },
      { ext: "gbo", cad: [a, m2] },
      { ext: "ssb", cad: l },
      { ext: "bottomsilkscreen\\.ger", cad: o2 },
      { match: /bottomsilk\.\w+$/, cad: [r2, i2] },
      { match: /b[._]silks/, cad: a },
      { match: /silkscreen_bottom/, cad: p },
      { match: /bottom_silk/, cad: n },
      { match: /bottom silk screen/, cad: null }
    ]
  },
  {
    type: A2,
    side: b4,
    matchers: [
      { ext: "crs", cad: c3 },
      { ext: "bsp", cad: c3 },
      { ext: "gbp", cad: [a, m2] },
      { ext: "spb", cad: l },
      { ext: "bcream\\.ger", cad: o2 },
      { match: /bottompaste\.\w+$/, cad: [r2, i2] },
      { match: /b[._]paste/, cad: a },
      { match: /solderpaste_bottom/, cad: p },
      { match: /bottom_paste/, cad: n }
    ]
  },
  {
    type: g4,
    side: P3,
    matchers: [
      { ext: "ly\\d+", cad: c3 },
      { ext: "gp?\\d+", cad: [a, m2] },
      { ext: "in\\d+", cad: l },
      { ext: "internalplane\\d+\\.ger", cad: o2 },
      { match: /in(?:ner)?\d+[._]cu/, cad: a },
      { match: /inner/, cad: i2 }
    ]
  },
  {
    type: L2,
    side: f2,
    matchers: [
      { ext: "dim", cad: c3 },
      { ext: "mil", cad: c3 },
      { ext: "gml", cad: c3 },
      { ext: "gm\\d+", cad: [a, m2] },
      { ext: "gko", cad: m2 },
      { ext: "fab", cad: l },
      { ext: "drd", cad: l },
      { match: /outline/, cad: [r2, n] },
      { match: /boardoutline/, cad: [o2, i2] },
      { match: /edge[._]cuts/, cad: a },
      { match: /profile/, cad: p },
      { match: /mechanical \d+/, cad: null }
    ]
  },
  {
    type: D4,
    side: f2,
    matchers: [
      { ext: "txt", cad: [c3, m2] },
      {
        ext: "xln",
        cad: [p, c3, o2]
      },
      { ext: "exc", cad: c3 },
      { ext: "drd", cad: c3 },
      { ext: "drl", cad: [a, i2] },
      { ext: "tap", cad: l },
      { ext: "npt", cad: l },
      { ext: "plated-drill\\.cnc", cad: r2 },
      { match: /fab/, cad: r2 },
      { match: /npth/, cad: a },
      { match: /drill/, cad: n }
    ]
  },
  {
    type: T3,
    side: null,
    matchers: [
      { ext: "pos", cad: a },
      { ext: "art", cad: I3 },
      { ext: "gbr", cad: null },
      { ext: "gbx", cad: null },
      { ext: "ger", cad: null },
      { ext: "pho", cad: null }
    ]
  }
];
var R5 = u2.flatMap((t2) => t2.matchers.flatMap((e2) => {
  const x3 = Array.isArray(e2.cad) ? e2.cad : [e2.cad], s3 = "ext" in e2 ? new RegExp("\\." + e2.ext + "$", "i") : new RegExp(e2.match, "i");
  return x3.map((d) => ({
    type: t2.type,
    side: t2.side,
    match: s3,
    cad: d
  }));
}));
function S4(t2) {
  return R5.map((e2) => e2.match.test(t2) ? { ...e2, filename: t2 } : null).filter((e2) => e2 !== null);
}
function O3(t2) {
  typeof t2 == "string" && (t2 = [t2]);
  const e2 = t2.flatMap((s3) => S4(s3)), x3 = C4(e2);
  return Object.fromEntries(
    t2.map((s3) => {
      const d = w2(e2, s3, x3), h2 = d ? { type: d.type, side: d.side } : { type: null, side: null };
      return [s3, h2];
    })
  );
}
function w2(t2, e2, x3) {
  const s3 = t2.filter((h2) => h2.filename === e2);
  return s3.find((h2) => h2.cad === x3) ?? s3[0] ?? null;
}

// node_modules/@tracespace/core/dist/tracespace-core.js
var A3 = class {
  /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */
  constructor(t2, l2, e2) {
    this.property = t2, this.normal = l2, e2 && (this.space = e2);
  }
};
A3.prototype.property = {};
A3.prototype.normal = {};
A3.prototype.space = null;
function fe3(n2, t2) {
  const l2 = {}, e2 = {};
  let o3 = -1;
  for (; ++o3 < n2.length; )
    Object.assign(l2, n2[o3].property), Object.assign(e2, n2[o3].normal);
  return new A3(l2, e2, t2);
}
function E2(n2) {
  return n2.toLowerCase();
}
var b5 = class {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */
  constructor(t2, l2) {
    this.property = t2, this.attribute = l2;
  }
};
b5.prototype.space = null;
b5.prototype.boolean = false;
b5.prototype.booleanish = false;
b5.prototype.overloadedBoolean = false;
b5.prototype.number = false;
b5.prototype.commaSeparated = false;
b5.prototype.spaceSeparated = false;
b5.prototype.commaOrSpaceSeparated = false;
b5.prototype.mustUseProperty = false;
b5.prototype.defined = false;
var Je = 0;
var p2 = w3();
var m3 = w3();
var he3 = w3();
var i3 = w3();
var g5 = w3();
var P4 = w3();
var y2 = w3();
function w3() {
  return 2 ** ++Je;
}
var _3 = Object.freeze(Object.defineProperty({
  __proto__: null,
  boolean: p2,
  booleanish: m3,
  commaOrSpaceSeparated: y2,
  commaSeparated: P4,
  number: i3,
  overloadedBoolean: he3,
  spaceSeparated: g5
}, Symbol.toStringTag, { value: "Module" }));
var I4 = Object.keys(_3);
var $4 = class extends b5 {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  constructor(t2, l2, e2, o3) {
    let a2 = -1;
    if (super(t2, l2), J2(this, "space", o3), typeof e2 == "number")
      for (; ++a2 < I4.length; ) {
        const r3 = I4[a2];
        J2(this, I4[a2], (e2 & _3[r3]) === _3[r3]);
      }
  }
};
$4.prototype.defined = true;
function J2(n2, t2, l2) {
  l2 && (n2[t2] = l2);
}
var Qe = {}.hasOwnProperty;
function O4(n2) {
  const t2 = {}, l2 = {};
  let e2;
  for (e2 in n2.properties)
    if (Qe.call(n2.properties, e2)) {
      const o3 = n2.properties[e2], a2 = new $4(
        e2,
        n2.transform(n2.attributes || {}, e2),
        o3,
        n2.space
      );
      n2.mustUseProperty && n2.mustUseProperty.includes(e2) && (a2.mustUseProperty = true), t2[e2] = a2, l2[E2(e2)] = e2, l2[E2(a2.attribute)] = e2;
    }
  return new A3(t2, l2, n2.space);
}
var ye3 = O4({
  space: "xlink",
  transform(n2, t2) {
    return "xlink:" + t2.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});
var be2 = O4({
  space: "xml",
  transform(n2, t2) {
    return "xml:" + t2.slice(3).toLowerCase();
  },
  properties: { xmlLang: null, xmlBase: null, xmlSpace: null }
});
function Se2(n2, t2) {
  return t2 in n2 ? n2[t2] : t2;
}
function ve2(n2, t2) {
  return Se2(n2, t2.toLowerCase());
}
var xe3 = O4({
  space: "xmlns",
  attributes: { xmlnsxlink: "xmlns:xlink" },
  transform: ve2,
  properties: { xmlns: null, xmlnsXLink: null }
});
var we2 = O4({
  transform(n2, t2) {
    return t2 === "role" ? t2 : "aria-" + t2.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: m3,
    ariaAutoComplete: null,
    ariaBusy: m3,
    ariaChecked: m3,
    ariaColCount: i3,
    ariaColIndex: i3,
    ariaColSpan: i3,
    ariaControls: g5,
    ariaCurrent: null,
    ariaDescribedBy: g5,
    ariaDetails: null,
    ariaDisabled: m3,
    ariaDropEffect: g5,
    ariaErrorMessage: null,
    ariaExpanded: m3,
    ariaFlowTo: g5,
    ariaGrabbed: m3,
    ariaHasPopup: null,
    ariaHidden: m3,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: g5,
    ariaLevel: i3,
    ariaLive: null,
    ariaModal: m3,
    ariaMultiLine: m3,
    ariaMultiSelectable: m3,
    ariaOrientation: null,
    ariaOwns: g5,
    ariaPlaceholder: null,
    ariaPosInSet: i3,
    ariaPressed: m3,
    ariaReadOnly: m3,
    ariaRelevant: null,
    ariaRequired: m3,
    ariaRoleDescription: g5,
    ariaRowCount: i3,
    ariaRowIndex: i3,
    ariaRowSpan: i3,
    ariaSelected: m3,
    ariaSetSize: i3,
    ariaSort: null,
    ariaValueMax: i3,
    ariaValueMin: i3,
    ariaValueNow: i3,
    ariaValueText: null,
    role: null
  }
});
var en2 = O4({
  space: "html",
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  transform: ve2,
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: P4,
    acceptCharset: g5,
    accessKey: g5,
    action: null,
    allow: null,
    allowFullScreen: p2,
    allowPaymentRequest: p2,
    allowUserMedia: p2,
    alt: null,
    as: null,
    async: p2,
    autoCapitalize: null,
    autoComplete: g5,
    autoFocus: p2,
    autoPlay: p2,
    capture: p2,
    charSet: null,
    checked: p2,
    cite: null,
    className: g5,
    cols: i3,
    colSpan: null,
    content: null,
    contentEditable: m3,
    controls: p2,
    controlsList: g5,
    coords: i3 | P4,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: p2,
    defer: p2,
    dir: null,
    dirName: null,
    disabled: p2,
    download: he3,
    draggable: m3,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: p2,
    formTarget: null,
    headers: g5,
    height: i3,
    hidden: p2,
    high: i3,
    href: null,
    hrefLang: null,
    htmlFor: g5,
    httpEquiv: g5,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: p2,
    itemId: null,
    itemProp: g5,
    itemRef: g5,
    itemScope: p2,
    itemType: g5,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: p2,
    low: i3,
    manifest: null,
    max: null,
    maxLength: i3,
    media: null,
    method: null,
    min: null,
    minLength: i3,
    multiple: p2,
    muted: p2,
    name: null,
    nonce: null,
    noModule: p2,
    noValidate: p2,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: p2,
    optimum: i3,
    pattern: null,
    ping: g5,
    placeholder: null,
    playsInline: p2,
    poster: null,
    preload: null,
    readOnly: p2,
    referrerPolicy: null,
    rel: g5,
    required: p2,
    reversed: p2,
    rows: i3,
    rowSpan: i3,
    sandbox: g5,
    scope: null,
    scoped: p2,
    seamless: p2,
    selected: p2,
    shape: null,
    size: i3,
    sizes: null,
    slot: null,
    span: i3,
    spellCheck: m3,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: i3,
    step: null,
    style: null,
    tabIndex: i3,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: p2,
    useMap: null,
    value: m3,
    width: i3,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: g5,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: i3,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: i3,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: p2,
    // Lists. Use CSS to reduce space between items instead
    declare: p2,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: i3,
    // `<img>` and `<object>`
    leftMargin: i3,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: i3,
    // `<body>`
    marginWidth: i3,
    // `<body>`
    noResize: p2,
    // `<frame>`
    noHref: p2,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: p2,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: p2,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: i3,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: m3,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: i3,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: i3,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: p2,
    disableRemotePlayback: p2,
    prefix: null,
    property: null,
    results: i3,
    security: null,
    unselectable: null
  }
});
var nn2 = O4({
  space: "svg",
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  transform: Se2,
  properties: {
    about: y2,
    accentHeight: i3,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: i3,
    amplitude: i3,
    arabicForm: null,
    ascent: i3,
    attributeName: null,
    attributeType: null,
    azimuth: i3,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: i3,
    by: null,
    calcMode: null,
    capHeight: i3,
    className: g5,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: i3,
    diffuseConstant: i3,
    direction: null,
    display: null,
    dur: null,
    divisor: i3,
    dominantBaseline: null,
    download: p2,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: i3,
    enableBackground: null,
    end: null,
    event: null,
    exponent: i3,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: i3,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: P4,
    g2: P4,
    glyphName: P4,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: i3,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: i3,
    horizOriginX: i3,
    horizOriginY: i3,
    id: null,
    ideographic: i3,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: i3,
    k: i3,
    k1: i3,
    k2: i3,
    k3: i3,
    k4: i3,
    kernelMatrix: y2,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: i3,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: i3,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: i3,
    overlineThickness: i3,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: i3,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: g5,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: i3,
    pointsAtY: i3,
    pointsAtZ: i3,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: y2,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: y2,
    rev: y2,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: y2,
    requiredFeatures: y2,
    requiredFonts: y2,
    requiredFormats: y2,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: i3,
    specularExponent: i3,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: i3,
    strikethroughThickness: i3,
    string: null,
    stroke: null,
    strokeDashArray: y2,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: i3,
    strokeOpacity: i3,
    strokeWidth: null,
    style: null,
    surfaceScale: i3,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: y2,
    tabIndex: i3,
    tableValues: null,
    target: null,
    targetX: i3,
    targetY: i3,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: y2,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: i3,
    underlineThickness: i3,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: i3,
    values: null,
    vAlphabetic: i3,
    vMathematical: i3,
    vectorEffect: null,
    vHanging: i3,
    vIdeographic: i3,
    version: null,
    vertAdvY: i3,
    vertOriginX: i3,
    vertOriginY: i3,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: i3,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});
var tn2 = /^data[-\w.:]+$/i;
var Q3 = /-[a-z]/g;
var ln2 = /[A-Z]/g;
function ke2(n2, t2) {
  const l2 = E2(t2);
  let e2 = t2, o3 = b5;
  if (l2 in n2.normal)
    return n2.property[n2.normal[l2]];
  if (l2.length > 4 && l2.slice(0, 4) === "data" && tn2.test(t2)) {
    if (t2.charAt(4) === "-") {
      const a2 = t2.slice(5).replace(Q3, rn2);
      e2 = "data" + a2.charAt(0).toUpperCase() + a2.slice(1);
    } else {
      const a2 = t2.slice(4);
      if (!Q3.test(a2)) {
        let r3 = a2.replace(ln2, on2);
        r3.charAt(0) !== "-" && (r3 = "-" + r3), t2 = "data" + r3;
      }
    }
    o3 = $4;
  }
  return new o3(e2, t2);
}
function on2(n2) {
  return "-" + n2.toLowerCase();
}
function rn2(n2) {
  return n2.charAt(1).toUpperCase();
}
var an2 = fe3([be2, ye3, xe3, we2, en2], "html");
var G3 = fe3([be2, ye3, xe3, we2, nn2], "svg");
var ee2 = /[#.]/g;
function sn3(n2, t2) {
  const l2 = n2 || "", e2 = {};
  let o3 = 0, a2, r3;
  for (; o3 < l2.length; ) {
    ee2.lastIndex = o3;
    const s3 = ee2.exec(l2), u3 = l2.slice(o3, s3 ? s3.index : l2.length);
    u3 && (a2 ? a2 === "#" ? e2.id = u3 : Array.isArray(e2.className) ? e2.className.push(u3) : e2.className = [u3] : r3 = u3, o3 += u3.length), s3 && (a2 = s3[0], o3++);
  }
  return {
    type: "element",
    // @ts-expect-error: fine.
    tagName: r3 || t2 || "div",
    properties: e2,
    children: []
  };
}
function ne3(n2) {
  const t2 = String(n2 || "").trim();
  return t2 ? t2.split(/[ \t\n\r\f]+/g) : [];
}
function un3(n2) {
  return n2.join(" ").trim();
}
function te3(n2) {
  const t2 = [], l2 = String(n2 || "");
  let e2 = l2.indexOf(","), o3 = 0, a2 = false;
  for (; !a2; ) {
    e2 === -1 && (e2 = l2.length, a2 = true);
    const r3 = l2.slice(o3, e2).trim();
    (r3 || !a2) && t2.push(r3), o3 = e2 + 1, e2 = l2.indexOf(",", o3);
  }
  return t2;
}
function cn3(n2, t2) {
  const l2 = t2 || {};
  return (n2[n2.length - 1] === "" ? [...n2, ""] : n2).join(
    (l2.padRight ? " " : "") + "," + (l2.padLeft === false ? "" : " ")
  ).trim();
}
var pn3 = /* @__PURE__ */ new Set(["menu", "submit", "reset", "button"]);
var z4 = {}.hasOwnProperty;
function dn3(n2, t2, l2) {
  const e2 = l2 && hn3(l2);
  return (
    /**
     * @type {{
     *   (): Root
     *   (selector: null | undefined, ...children: Array<HChild>): Root
     *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element
     *   (selector: string, ...children: Array<HChild>): Element
     * }}
     */
    /**
     * Hyperscript compatible DSL for creating virtual hast trees.
     *
     * @param {string | null} [selector]
     * @param {HProperties | HChild} [properties]
     * @param {Array<HChild>} children
     * @returns {HResult}
     */
    function(a2, r3, ...s3) {
      let u3 = -1, c4;
      if (a2 == null)
        c4 = { type: "root", children: [] }, s3.unshift(r3);
      else if (c4 = sn3(a2, t2), c4.tagName = c4.tagName.toLowerCase(), e2 && z4.call(e2, c4.tagName) && (c4.tagName = e2[c4.tagName]), gn3(r3, c4.tagName)) {
        let d;
        for (d in r3)
          z4.call(r3, d) && mn3(n2, c4.properties, d, r3[d]);
      } else
        s3.unshift(r3);
      for (; ++u3 < s3.length; )
        q3(c4.children, s3[u3]);
      return c4.type === "element" && c4.tagName === "template" && (c4.content = { type: "root", children: c4.children }, c4.children = []), c4;
    }
  );
}
function gn3(n2, t2) {
  return n2 == null || typeof n2 != "object" || Array.isArray(n2) ? false : t2 === "input" || !n2.type || typeof n2.type != "string" ? true : "children" in n2 && Array.isArray(n2.children) ? false : t2 === "button" ? pn3.has(n2.type.toLowerCase()) : !("value" in n2);
}
function mn3(n2, t2, l2, e2) {
  const o3 = ke2(n2, l2);
  let a2 = -1, r3;
  if (e2 != null) {
    if (typeof e2 == "number") {
      if (Number.isNaN(e2))
        return;
      r3 = e2;
    } else
      typeof e2 == "boolean" ? r3 = e2 : typeof e2 == "string" ? o3.spaceSeparated ? r3 = ne3(e2) : o3.commaSeparated ? r3 = te3(e2) : o3.commaOrSpaceSeparated ? r3 = ne3(te3(e2).join(" ")) : r3 = le3(o3, o3.property, e2) : Array.isArray(e2) ? r3 = e2.concat() : r3 = o3.property === "style" ? fn3(e2) : String(e2);
    if (Array.isArray(r3)) {
      const s3 = [];
      for (; ++a2 < r3.length; )
        s3[a2] = le3(o3, o3.property, r3[a2]);
      r3 = s3;
    }
    o3.property === "className" && Array.isArray(t2.className) && (r3 = t2.className.concat(r3)), t2[o3.property] = r3;
  }
}
function q3(n2, t2) {
  let l2 = -1;
  if (t2 != null)
    if (typeof t2 == "string" || typeof t2 == "number")
      n2.push({ type: "text", value: String(t2) });
    else if (Array.isArray(t2))
      for (; ++l2 < t2.length; )
        q3(n2, t2[l2]);
    else if (typeof t2 == "object" && "type" in t2)
      t2.type === "root" ? q3(n2, t2.children) : n2.push(t2);
    else
      throw new Error("Expected node, nodes, or string, got `" + t2 + "`");
}
function le3(n2, t2, l2) {
  if (typeof l2 == "string") {
    if (n2.number && l2 && !Number.isNaN(Number(l2)))
      return Number(l2);
    if ((n2.boolean || n2.overloadedBoolean) && (l2 === "" || E2(l2) === E2(t2)))
      return true;
  }
  return l2;
}
function fn3(n2) {
  const t2 = [];
  let l2;
  for (l2 in n2)
    z4.call(n2, l2) && t2.push([l2, n2[l2]].join(": "));
  return t2.join("; ");
}
function hn3(n2) {
  const t2 = {};
  let l2 = -1;
  for (; ++l2 < n2.length; )
    t2[n2[l2].toLowerCase()] = n2[l2];
  return t2;
}
var yn3 = [
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "solidColor",
  "textArea",
  "textPath"
];
var h = dn3(G3, "g", yn3);
async function bn3(n2) {
  return typeof n2 == "string" ? vn3(n2) : Sn3(n2);
}
async function Sn3(n2) {
  if (typeof File > "u" || typeof FileReader > "u")
    throw new TypeError(
      `Cannot read "file" object of type ${typeof n2} in a non-browser environment`
    );
  return new Promise((t2, l2) => {
    const e2 = new FileReader();
    e2.addEventListener("load", o3, { once: true }), e2.addEventListener("error", a2, { once: true }), e2.readAsText(n2);
    function o3() {
      const r3 = e2.result;
      e2.removeEventListener("error", a2), t2({ filename: n2.name, contents: r3 });
    }
    function a2() {
      e2.removeEventListener("load", o3), l2(e2.error);
    }
  });
}
async function vn3(n2) {
  const [t2, l2] = await Promise.all([
    import("./promises-43JGIORE.js"),
    import("./node_path-IJW6PQZD.js")
  ]).catch(() => {
    throw new TypeError(
      "Cannot read a file path string in a non-Node.js environment"
    );
  }), e2 = l2.basename(n2), o3 = await t2.readFile(n2, "utf8");
  return { filename: e2, contents: o3 };
}
function xn3(n2) {
  const t2 = n2.filter((e2) => e2.parseTree.filetype === Se).map((e2) => e2.filename), l2 = O3(t2);
  return Object.fromEntries(
    n2.map(({ id: e2, filename: o3, parseTree: a2 }) => {
      const r3 = a2.filetype === pe ? { type: D4, side: f2 } : l2[o3];
      return [e2, r3];
    })
  );
}
var k5 = ({ id: n2 }) => n2;
var C5 = (n2, t2) => (l2) => l2.type === n2 && (t2 === void 0 || l2.side === t2);
function wn3(n2) {
  return n2.filter(C5(L2)).map(k5)[0];
}
function Ce3(n2) {
  return n2.filter(C5(D4)).map(k5);
}
function j3(n2, t2) {
  return {
    copper: t2.filter(C5(g4, n2)).map(k5),
    solderMask: t2.filter(C5(E, n2)).map(k5),
    silkScreen: t2.filter(C5(k4, n2)).map(k5),
    solderPaste: t2.filter(C5(A2, n2)).map(k5)
  };
}
function kn2(n2) {
  const t2 = /* @__PURE__ */ new Map(), l2 = /* @__PURE__ */ new Map();
  for (const o3 of n2) {
    const a2 = Pn2(o3);
    t2.set(a2, o3);
    for (const r3 of [o3.start, o3.end]) {
      const s3 = L3(r3), u3 = l2.get(s3) ?? [];
      u3.push(a2), l2.set(s3, u3);
    }
  }
  return Object.assign(Object.create(Cn3), {
    segmentsById: t2,
    segmentIdsByPointId: l2
  }).walk();
}
var Cn3 = {
  walk() {
    const n2 = [];
    for (; this.segmentsById.size > 0; ) {
      const t2 = this.segmentIdsByPointId.keys().next().value, l2 = this.walkPath(t2);
      if (l2.length > 0) {
        const e2 = l2[0], o3 = l2[l2.length - 1], a2 = [e2.start[0], e2.start[1]], r3 = [o3.end[0], o3.end[1]];
        n2.push({ start: a2, end: r3, segments: l2 });
      }
    }
    return n2;
  },
  walkPath(n2) {
    const t2 = this.shiftNextSegment(n2);
    if (t2 !== void 0) {
      const l2 = L3(t2.start), e2 = L3(t2.end), o3 = n2 === l2 ? e2 : l2;
      return [
        n2 === l2 ? t2 : Pe3(t2),
        ...this.walkPath(o3)
      ];
    }
    return [];
  },
  shiftNextSegment(n2) {
    const t2 = this.shiftSegmentId(n2);
    if (t2 !== void 0)
      return this.consumeSegment(t2) ?? this.shiftNextSegment(n2);
  },
  shiftSegmentId(n2) {
    const t2 = this.segmentIdsByPointId.get(n2), l2 = t2 == null ? void 0 : t2.shift();
    return (t2 == null ? void 0 : t2.length) === 0 && this.segmentIdsByPointId.delete(n2), l2;
  },
  consumeSegment(n2) {
    const t2 = this.segmentsById.get(n2);
    return this.segmentsById.delete(n2), t2;
  }
};
function L3(n2) {
  return `${n2[0]},${n2[1]}`;
}
function Pn2(n2) {
  const { type: t2 } = n2, [l2, e2] = Nn2(n2.start, n2.end);
  return `${t2}:${L3(l2)}:${L3(e2)}`;
}
function Nn2(n2, t2) {
  return t2[0] < n2[0] ? [t2, n2] : t2[0] > n2[0] ? [n2, t2] : t2[1] < n2[1] ? [t2, n2] : [n2, t2];
}
function Pe3(n2) {
  return { ...n2, start: n2.end, end: n2.start };
}
var On3 = (n2) => ({
  type: Kt2,
  segments: n2
});
var En2 = (n2) => ({
  type: it2,
  width: 0,
  segments: n2
});
function Ln3(n2, t2) {
  const l2 = t2 ** 2, e2 = [...n2], o3 = [], a2 = [];
  for (; e2.length > 0; ) {
    const r3 = e2.shift();
    let s3 = oe3(r3.end, r3.start), u3 = r3, c4 = r3.start;
    if (s3 === 0) {
      o3.push(r3.segments);
      continue;
    }
    for (const d of e2)
      for (const S5 of [d.start, d.end]) {
        const v3 = oe3(r3.end, S5);
        v3 < s3 && (s3 = v3, u3 = d, c4 = S5);
      }
    if (s3 <= l2) {
      const d = {
        type: O,
        start: r3.end,
        end: c4
      };
      if (r3 === u3) {
        o3.push([...r3.segments, d]);
        continue;
      }
      const S5 = e2.indexOf(u3);
      S5 !== -1 && e2.splice(S5, 1);
      const v3 = c4 === u3.start ? u3.segments : u3.segments.map(Pe3).reverse(), x3 = c4 === u3.start ? u3.end : u3.start;
      e2.unshift({
        start: r3.start,
        end: x3,
        segments: [...r3.segments, d, ...v3]
      });
    } else
      a2.push(r3.segments);
  }
  return [o3.map(On3), a2.map(En2)];
}
function oe3(n2, t2) {
  return n2[0] !== t2[0] || n2[1] !== t2[1] ? (n2[0] - t2[0]) ** 2 + (n2[1] - t2[1]) ** 2 : 0;
}
var An3 = "missingOutlineLayer";
var Dn2 = "noPathsInOutlineLayer";
var Rn2 = "noClosedRegionsFound";
function Mn3(n2, t2, l2) {
  const e2 = wn3(n2), o3 = e2 ? t2[e2] : void 0, a2 = Ce2.sum(
    Object.values(t2).map(({ size: d }) => d)
  );
  if (o3 === void 0)
    return {
      size: a2,
      regions: [],
      openPaths: [],
      failureReason: An3
    };
  const r3 = o3.children.filter((d) => d.type === it2).flatMap((d) => d.segments);
  if (r3.length === 0)
    return {
      size: a2,
      regions: [],
      openPaths: [],
      failureReason: Dn2
    };
  const s3 = kn2(r3), [u3, c4] = Ln3(s3, l2);
  return u3.length === 0 ? { size: a2, regions: u3, openPaths: c4, failureReason: Rn2 } : {
    regions: u3,
    openPaths: c4,
    size: Ce2.fromGraphics(u3)
  };
}
function Ne2(n2) {
  const { regions: t2, size: l2, failureReason: e2 } = n2, o3 = An2(l2), a2 = t2.flatMap((r3) => r3.segments);
  return e2 ? { viewBox: o3, failureReason: e2 } : { viewBox: o3, path: W2({ type: Kt2, segments: a2 }) };
}
var Tn3 = [
  "area",
  "base",
  "basefont",
  "bgsound",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "image",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "menuitem",
  "meta",
  "nextid",
  "param",
  "source",
  "track",
  "wbr"
];
var re3 = {}.hasOwnProperty;
function In3(n2, t2) {
  const l2 = t2 || {};
  function e2(o3, ...a2) {
    let r3 = e2.invalid;
    const s3 = e2.handlers;
    if (o3 && re3.call(o3, n2)) {
      const u3 = String(o3[n2]);
      r3 = re3.call(s3, u3) ? s3[u3] : e2.unknown;
    }
    if (r3)
      return r3.call(this, o3, ...a2);
  }
  return e2.handlers = l2.handlers || {}, e2.invalid = l2.invalid, e2.unknown = l2.unknown, e2;
}
function Bn(n2, t2) {
  if (n2 = n2.replace(
    t2.subset ? Fn(t2.subset) : /["&'<>`]/g,
    e2
  ), t2.subset || t2.escapeOnly)
    return n2;
  return n2.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, l2).replace(
    // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
    /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,
    e2
  );
  function l2(o3, a2, r3) {
    return t2.format(
      (o3.charCodeAt(0) - 55296) * 1024 + o3.charCodeAt(1) - 56320 + 65536,
      r3.charCodeAt(a2 + 2),
      t2
    );
  }
  function e2(o3, a2, r3) {
    return t2.format(
      o3.charCodeAt(0),
      r3.charCodeAt(a2 + 1),
      t2
    );
  }
}
function Fn(n2) {
  const t2 = [];
  let l2 = -1;
  for (; ++l2 < n2.length; )
    t2.push(n2[l2].replace(/[|\\{}()[\]^$+*?.]/g, "\\$&"));
  return new RegExp("(?:" + t2.join("|") + ")", "g");
}
function Un(n2, t2, l2) {
  const e2 = "&#x" + n2.toString(16).toUpperCase();
  return l2 && t2 && !/[\dA-Fa-f]/.test(String.fromCharCode(t2)) ? e2 : e2 + ";";
}
function _n2(n2, t2, l2) {
  const e2 = "&#" + String(n2);
  return l2 && t2 && !/\d/.test(String.fromCharCode(t2)) ? e2 : e2 + ";";
}
var zn = [
  "AElig",
  "AMP",
  "Aacute",
  "Acirc",
  "Agrave",
  "Aring",
  "Atilde",
  "Auml",
  "COPY",
  "Ccedil",
  "ETH",
  "Eacute",
  "Ecirc",
  "Egrave",
  "Euml",
  "GT",
  "Iacute",
  "Icirc",
  "Igrave",
  "Iuml",
  "LT",
  "Ntilde",
  "Oacute",
  "Ocirc",
  "Ograve",
  "Oslash",
  "Otilde",
  "Ouml",
  "QUOT",
  "REG",
  "THORN",
  "Uacute",
  "Ucirc",
  "Ugrave",
  "Uuml",
  "Yacute",
  "aacute",
  "acirc",
  "acute",
  "aelig",
  "agrave",
  "amp",
  "aring",
  "atilde",
  "auml",
  "brvbar",
  "ccedil",
  "cedil",
  "cent",
  "copy",
  "curren",
  "deg",
  "divide",
  "eacute",
  "ecirc",
  "egrave",
  "eth",
  "euml",
  "frac12",
  "frac14",
  "frac34",
  "gt",
  "iacute",
  "icirc",
  "iexcl",
  "igrave",
  "iquest",
  "iuml",
  "laquo",
  "lt",
  "macr",
  "micro",
  "middot",
  "nbsp",
  "not",
  "ntilde",
  "oacute",
  "ocirc",
  "ograve",
  "ordf",
  "ordm",
  "oslash",
  "otilde",
  "ouml",
  "para",
  "plusmn",
  "pound",
  "quot",
  "raquo",
  "reg",
  "sect",
  "shy",
  "sup1",
  "sup2",
  "sup3",
  "szlig",
  "thorn",
  "times",
  "uacute",
  "ucirc",
  "ugrave",
  "uml",
  "uuml",
  "yacute",
  "yen",
  "yuml"
];
var B3 = {
  nbsp: " ",
  iexcl: "¡",
  cent: "¢",
  pound: "£",
  curren: "¤",
  yen: "¥",
  brvbar: "¦",
  sect: "§",
  uml: "¨",
  copy: "©",
  ordf: "ª",
  laquo: "«",
  not: "¬",
  shy: "­",
  reg: "®",
  macr: "¯",
  deg: "°",
  plusmn: "±",
  sup2: "²",
  sup3: "³",
  acute: "´",
  micro: "µ",
  para: "¶",
  middot: "·",
  cedil: "¸",
  sup1: "¹",
  ordm: "º",
  raquo: "»",
  frac14: "¼",
  frac12: "½",
  frac34: "¾",
  iquest: "¿",
  Agrave: "À",
  Aacute: "Á",
  Acirc: "Â",
  Atilde: "Ã",
  Auml: "Ä",
  Aring: "Å",
  AElig: "Æ",
  Ccedil: "Ç",
  Egrave: "È",
  Eacute: "É",
  Ecirc: "Ê",
  Euml: "Ë",
  Igrave: "Ì",
  Iacute: "Í",
  Icirc: "Î",
  Iuml: "Ï",
  ETH: "Ð",
  Ntilde: "Ñ",
  Ograve: "Ò",
  Oacute: "Ó",
  Ocirc: "Ô",
  Otilde: "Õ",
  Ouml: "Ö",
  times: "×",
  Oslash: "Ø",
  Ugrave: "Ù",
  Uacute: "Ú",
  Ucirc: "Û",
  Uuml: "Ü",
  Yacute: "Ý",
  THORN: "Þ",
  szlig: "ß",
  agrave: "à",
  aacute: "á",
  acirc: "â",
  atilde: "ã",
  auml: "ä",
  aring: "å",
  aelig: "æ",
  ccedil: "ç",
  egrave: "è",
  eacute: "é",
  ecirc: "ê",
  euml: "ë",
  igrave: "ì",
  iacute: "í",
  icirc: "î",
  iuml: "ï",
  eth: "ð",
  ntilde: "ñ",
  ograve: "ò",
  oacute: "ó",
  ocirc: "ô",
  otilde: "õ",
  ouml: "ö",
  divide: "÷",
  oslash: "ø",
  ugrave: "ù",
  uacute: "ú",
  ucirc: "û",
  uuml: "ü",
  yacute: "ý",
  thorn: "þ",
  yuml: "ÿ",
  fnof: "ƒ",
  Alpha: "Α",
  Beta: "Β",
  Gamma: "Γ",
  Delta: "Δ",
  Epsilon: "Ε",
  Zeta: "Ζ",
  Eta: "Η",
  Theta: "Θ",
  Iota: "Ι",
  Kappa: "Κ",
  Lambda: "Λ",
  Mu: "Μ",
  Nu: "Ν",
  Xi: "Ξ",
  Omicron: "Ο",
  Pi: "Π",
  Rho: "Ρ",
  Sigma: "Σ",
  Tau: "Τ",
  Upsilon: "Υ",
  Phi: "Φ",
  Chi: "Χ",
  Psi: "Ψ",
  Omega: "Ω",
  alpha: "α",
  beta: "β",
  gamma: "γ",
  delta: "δ",
  epsilon: "ε",
  zeta: "ζ",
  eta: "η",
  theta: "θ",
  iota: "ι",
  kappa: "κ",
  lambda: "λ",
  mu: "μ",
  nu: "ν",
  xi: "ξ",
  omicron: "ο",
  pi: "π",
  rho: "ρ",
  sigmaf: "ς",
  sigma: "σ",
  tau: "τ",
  upsilon: "υ",
  phi: "φ",
  chi: "χ",
  psi: "ψ",
  omega: "ω",
  thetasym: "ϑ",
  upsih: "ϒ",
  piv: "ϖ",
  bull: "•",
  hellip: "…",
  prime: "′",
  Prime: "″",
  oline: "‾",
  frasl: "⁄",
  weierp: "℘",
  image: "ℑ",
  real: "ℜ",
  trade: "™",
  alefsym: "ℵ",
  larr: "←",
  uarr: "↑",
  rarr: "→",
  darr: "↓",
  harr: "↔",
  crarr: "↵",
  lArr: "⇐",
  uArr: "⇑",
  rArr: "⇒",
  dArr: "⇓",
  hArr: "⇔",
  forall: "∀",
  part: "∂",
  exist: "∃",
  empty: "∅",
  nabla: "∇",
  isin: "∈",
  notin: "∉",
  ni: "∋",
  prod: "∏",
  sum: "∑",
  minus: "−",
  lowast: "∗",
  radic: "√",
  prop: "∝",
  infin: "∞",
  ang: "∠",
  and: "∧",
  or: "∨",
  cap: "∩",
  cup: "∪",
  int: "∫",
  there4: "∴",
  sim: "∼",
  cong: "≅",
  asymp: "≈",
  ne: "≠",
  equiv: "≡",
  le: "≤",
  ge: "≥",
  sub: "⊂",
  sup: "⊃",
  nsub: "⊄",
  sube: "⊆",
  supe: "⊇",
  oplus: "⊕",
  otimes: "⊗",
  perp: "⊥",
  sdot: "⋅",
  lceil: "⌈",
  rceil: "⌉",
  lfloor: "⌊",
  rfloor: "⌋",
  lang: "〈",
  rang: "〉",
  loz: "◊",
  spades: "♠",
  clubs: "♣",
  hearts: "♥",
  diams: "♦",
  quot: '"',
  amp: "&",
  lt: "<",
  gt: ">",
  OElig: "Œ",
  oelig: "œ",
  Scaron: "Š",
  scaron: "š",
  Yuml: "Ÿ",
  circ: "ˆ",
  tilde: "˜",
  ensp: " ",
  emsp: " ",
  thinsp: " ",
  zwnj: "‌",
  zwj: "‍",
  lrm: "‎",
  rlm: "‏",
  ndash: "–",
  mdash: "—",
  lsquo: "‘",
  rsquo: "’",
  sbquo: "‚",
  ldquo: "“",
  rdquo: "”",
  bdquo: "„",
  dagger: "†",
  Dagger: "‡",
  permil: "‰",
  lsaquo: "‹",
  rsaquo: "›",
  euro: "€"
};
var qn = [
  "cent",
  "copy",
  "divide",
  "gt",
  "lt",
  "not",
  "para",
  "times"
];
var Oe2 = {}.hasOwnProperty;
var H3 = {};
var D5;
for (D5 in B3)
  Oe2.call(B3, D5) && (H3[B3[D5]] = D5);
function jn(n2, t2, l2, e2) {
  const o3 = String.fromCharCode(n2);
  if (Oe2.call(H3, o3)) {
    const a2 = H3[o3], r3 = "&" + a2;
    return l2 && zn.includes(a2) && !qn.includes(a2) && (!e2 || t2 && t2 !== 61 && /[^\da-z]/i.test(String.fromCharCode(t2))) ? r3 : r3 + ";";
  }
  return "";
}
function Hn(n2, t2, l2) {
  let e2 = Un(n2, t2, l2.omitOptionalSemicolons), o3;
  if ((l2.useNamedReferences || l2.useShortestReferences) && (o3 = jn(
    n2,
    t2,
    l2.omitOptionalSemicolons,
    l2.attribute
  )), (l2.useShortestReferences || !o3) && l2.useShortestReferences) {
    const a2 = _n2(n2, t2, l2.omitOptionalSemicolons);
    a2.length < e2.length && (e2 = a2);
  }
  return o3 && (!l2.useShortestReferences || o3.length < e2.length) ? o3 : e2;
}
function N3(n2, t2) {
  return Bn(n2, Object.assign({ format: Hn }, t2));
}
function $n(n2, t2, l2, e2) {
  return e2.settings.bogusComments ? "<?" + N3(
    n2.value,
    Object.assign({}, e2.settings.characterReferences, { subset: [">"] })
  ) + ">" : "<!--" + n2.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, o3) + "-->";
  function o3(a2) {
    return N3(
      a2,
      Object.assign({}, e2.settings.characterReferences, {
        subset: ["<", ">"]
      })
    );
  }
}
function Gn(n2, t2, l2, e2) {
  return "<!" + (e2.settings.upperDoctype ? "DOCTYPE" : "doctype") + (e2.settings.tightDoctype ? "" : " ") + "html>";
}
function ae3(n2, t2) {
  const l2 = String(n2);
  if (typeof t2 != "string")
    throw new TypeError("Expected character");
  let e2 = 0, o3 = l2.indexOf(t2);
  for (; o3 !== -1; )
    e2++, o3 = l2.indexOf(t2, o3 + t2.length);
  return e2;
}
function Y2(n2) {
  const t2 = (
    // @ts-expect-error looks like a node.
    n2 && typeof n2 == "object" && n2.type === "text" ? (
      // @ts-expect-error looks like a text.
      n2.value || ""
    ) : n2
  );
  return typeof t2 == "string" && t2.replace(/[ \t\n\f\r]/g, "") === "";
}
var f3 = Le2(1);
var Ee3 = Le2(-1);
function Le2(n2) {
  return t2;
  function t2(l2, e2, o3) {
    const a2 = l2 ? l2.children : [];
    let r3 = (e2 || 0) + n2, s3 = a2 && a2[r3];
    if (!o3)
      for (; s3 && Y2(s3); )
        r3 += n2, s3 = a2[r3];
    return s3;
  }
}
var Yn = {}.hasOwnProperty;
function Ae2(n2) {
  return t2;
  function t2(l2, e2, o3) {
    return Yn.call(n2, l2.tagName) && n2[l2.tagName](l2, e2, o3);
  }
}
var V3 = Ae2({
  html: Vn,
  head: F3,
  body: Wn,
  p: Kn,
  li: Xn,
  dt: Zn,
  dd: Jn,
  rt: ie2,
  rp: ie2,
  optgroup: Qn,
  option: et2,
  menuitem: nt2,
  colgroup: F3,
  caption: F3,
  thead: tt2,
  tbody: lt3,
  tfoot: ot,
  tr: rt2,
  td: se2,
  th: se2
});
function F3(n2, t2, l2) {
  const e2 = f3(l2, t2, true);
  return !e2 || e2.type !== "comment" && !(e2.type === "text" && Y2(e2.value.charAt(0)));
}
function Vn(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type !== "comment";
}
function Wn(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type !== "comment";
}
function Kn(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return e2 ? e2.type === "element" && (e2.tagName === "address" || e2.tagName === "article" || e2.tagName === "aside" || e2.tagName === "blockquote" || e2.tagName === "details" || e2.tagName === "div" || e2.tagName === "dl" || e2.tagName === "fieldset" || e2.tagName === "figcaption" || e2.tagName === "figure" || e2.tagName === "footer" || e2.tagName === "form" || e2.tagName === "h1" || e2.tagName === "h2" || e2.tagName === "h3" || e2.tagName === "h4" || e2.tagName === "h5" || e2.tagName === "h6" || e2.tagName === "header" || e2.tagName === "hgroup" || e2.tagName === "hr" || e2.tagName === "main" || e2.tagName === "menu" || e2.tagName === "nav" || e2.tagName === "ol" || e2.tagName === "p" || e2.tagName === "pre" || e2.tagName === "section" || e2.tagName === "table" || e2.tagName === "ul") : !l2 || // Confusing parent.
  !(l2.type === "element" && (l2.tagName === "a" || l2.tagName === "audio" || l2.tagName === "del" || l2.tagName === "ins" || l2.tagName === "map" || l2.tagName === "noscript" || l2.tagName === "video"));
}
function Xn(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type === "element" && e2.tagName === "li";
}
function Zn(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return e2 && e2.type === "element" && (e2.tagName === "dt" || e2.tagName === "dd");
}
function Jn(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type === "element" && (e2.tagName === "dt" || e2.tagName === "dd");
}
function ie2(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type === "element" && (e2.tagName === "rp" || e2.tagName === "rt");
}
function Qn(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type === "element" && e2.tagName === "optgroup";
}
function et2(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type === "element" && (e2.tagName === "option" || e2.tagName === "optgroup");
}
function nt2(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type === "element" && (e2.tagName === "menuitem" || e2.tagName === "hr" || e2.tagName === "menu");
}
function tt2(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return e2 && e2.type === "element" && (e2.tagName === "tbody" || e2.tagName === "tfoot");
}
function lt3(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type === "element" && (e2.tagName === "tbody" || e2.tagName === "tfoot");
}
function ot(n2, t2, l2) {
  return !f3(l2, t2);
}
function rt2(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type === "element" && e2.tagName === "tr";
}
function se2(n2, t2, l2) {
  const e2 = f3(l2, t2);
  return !e2 || e2.type === "element" && (e2.tagName === "td" || e2.tagName === "th");
}
var at2 = Ae2({
  html: it3,
  head: st2,
  body: ut3,
  colgroup: ct2,
  tbody: pt3
});
function it3(n2) {
  const t2 = f3(n2, -1);
  return !t2 || t2.type !== "comment";
}
function st2(n2) {
  const t2 = n2.children, l2 = [];
  let e2 = -1;
  for (; ++e2 < t2.length; ) {
    const o3 = t2[e2];
    if (o3.type === "element" && (o3.tagName === "title" || o3.tagName === "base")) {
      if (l2.includes(o3.tagName))
        return false;
      l2.push(o3.tagName);
    }
  }
  return t2.length > 0;
}
function ut3(n2) {
  const t2 = f3(n2, -1, true);
  return !t2 || t2.type !== "comment" && !(t2.type === "text" && Y2(t2.value.charAt(0))) && !(t2.type === "element" && (t2.tagName === "meta" || t2.tagName === "link" || t2.tagName === "script" || t2.tagName === "style" || t2.tagName === "template"));
}
function ct2(n2, t2, l2) {
  const e2 = Ee3(l2, t2), o3 = f3(n2, -1, true);
  return l2 && e2 && e2.type === "element" && e2.tagName === "colgroup" && V3(e2, l2.children.indexOf(e2), l2) ? false : o3 && o3.type === "element" && o3.tagName === "col";
}
function pt3(n2, t2, l2) {
  const e2 = Ee3(l2, t2), o3 = f3(n2, -1);
  return l2 && e2 && e2.type === "element" && (e2.tagName === "thead" || e2.tagName === "tbody") && V3(e2, l2.children.indexOf(e2), l2) ? false : o3 && o3.type === "element" && o3.tagName === "tr";
}
var R6 = {
  // See: <https://html.spec.whatwg.org/#attribute-name-state>.
  name: [
    [`	
\f\r &/=>`.split(""), `	
\f\r "&'/=>\``.split("")],
    [`\0	
\f\r "&'/<=>`.split(""), `\0	
\f\r "&'/<=>\``.split("")]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.
  unquoted: [
    [`	
\f\r &>`.split(""), `\0	
\f\r "&'<=>\``.split("")],
    [`\0	
\f\r "&'<=>\``.split(""), `\0	
\f\r "&'<=>\``.split("")]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.
  single: [
    ["&'".split(""), "\"&'`".split("")],
    ["\0&'".split(""), "\0\"&'`".split("")]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.
  double: [
    ['"&'.split(""), "\"&'`".split("")],
    ['\0"&'.split(""), "\0\"&'`".split("")]
  ]
};
function dt3(n2, t2, l2, e2) {
  const o3 = e2.schema, a2 = o3.space === "svg" ? false : e2.settings.omitOptionalTags;
  let r3 = o3.space === "svg" ? e2.settings.closeEmptyElements : e2.settings.voids.includes(n2.tagName.toLowerCase());
  const s3 = [];
  let u3;
  o3.space === "html" && n2.tagName === "svg" && (e2.schema = G3);
  const c4 = gt2(e2, n2.properties), d = e2.all(
    o3.space === "html" && n2.tagName === "template" ? n2.content : n2
  );
  return e2.schema = o3, d && (r3 = false), (c4 || !a2 || !at2(n2, t2, l2)) && (s3.push("<", n2.tagName, c4 ? " " + c4 : ""), r3 && (o3.space === "svg" || e2.settings.closeSelfClosing) && (u3 = c4.charAt(c4.length - 1), (!e2.settings.tightSelfClosing || u3 === "/" || u3 && u3 !== '"' && u3 !== "'") && s3.push(" "), s3.push("/")), s3.push(">")), s3.push(d), !r3 && (!a2 || !V3(n2, t2, l2)) && s3.push("</" + n2.tagName + ">"), s3.join("");
}
function gt2(n2, t2) {
  const l2 = [];
  let e2 = -1, o3;
  if (t2) {
    for (o3 in t2)
      if (t2[o3] !== void 0 && t2[o3] !== null) {
        const a2 = mt3(n2, o3, t2[o3]);
        a2 && l2.push(a2);
      }
  }
  for (; ++e2 < l2.length; ) {
    const a2 = n2.settings.tightAttributes ? l2[e2].charAt(l2[e2].length - 1) : null;
    e2 !== l2.length - 1 && a2 !== '"' && a2 !== "'" && (l2[e2] += " ");
  }
  return l2.join("");
}
function mt3(n2, t2, l2) {
  const e2 = ke2(n2.schema, t2), o3 = n2.settings.allowParseErrors && n2.schema.space === "html" ? 0 : 1, a2 = n2.settings.allowDangerousCharacters ? 0 : 1;
  let r3 = n2.quote, s3;
  if (e2.overloadedBoolean && (l2 === e2.attribute || l2 === "") ? l2 = true : (e2.boolean || e2.overloadedBoolean && typeof l2 != "string") && (l2 = Boolean(l2)), l2 == null || l2 === false || typeof l2 == "number" && Number.isNaN(l2))
    return "";
  const u3 = N3(
    e2.attribute,
    Object.assign({}, n2.settings.characterReferences, {
      // Always encode without parse errors in non-HTML.
      subset: R6.name[o3][a2]
    })
  );
  return l2 === true || (l2 = Array.isArray(l2) ? (e2.commaSeparated ? cn3 : un3)(l2, {
    padLeft: !n2.settings.tightCommaSeparatedLists
  }) : String(l2), n2.settings.collapseEmptyAttributes && !l2) ? u3 : (n2.settings.preferUnquoted && (s3 = N3(
    l2,
    Object.assign({}, n2.settings.characterReferences, {
      subset: R6.unquoted[o3][a2],
      attribute: true
    })
  )), s3 !== l2 && (n2.settings.quoteSmart && ae3(l2, r3) > ae3(l2, n2.alternative) && (r3 = n2.alternative), s3 = r3 + N3(
    l2,
    Object.assign({}, n2.settings.characterReferences, {
      // Always encode without parse errors in non-HTML.
      subset: (r3 === "'" ? R6.single : R6.double)[o3][a2],
      attribute: true
    })
  ) + r3), u3 + (s3 && "=" + s3));
}
function De2(n2, t2, l2, e2) {
  return l2 && l2.type === "element" && (l2.tagName === "script" || l2.tagName === "style") ? n2.value : N3(
    n2.value,
    Object.assign({}, e2.settings.characterReferences, {
      subset: ["<", "&"]
    })
  );
}
function ft3(n2, t2, l2, e2) {
  return e2.settings.allowDangerousHtml ? n2.value : De2(n2, t2, l2, e2);
}
function ht3(n2, t2, l2, e2) {
  return e2.all(n2);
}
var yt3 = In3("type", {
  invalid: bt2,
  unknown: St2,
  handlers: { comment: $n, doctype: Gn, element: dt3, raw: ft3, root: ht3, text: De2 }
});
function bt2(n2) {
  throw new Error("Expected node, not `" + n2 + "`");
}
function St2(n2) {
  throw new Error("Cannot compile unknown node `" + n2.type + "`");
}
function vt2(n2, t2) {
  const l2 = t2 || {}, e2 = l2.quote || '"', o3 = e2 === '"' ? "'" : '"';
  if (e2 !== '"' && e2 !== "'")
    throw new Error("Invalid quote `" + e2 + "`, expected `'` or `\"`");
  return {
    one: xt3,
    all: wt2,
    settings: {
      omitOptionalTags: l2.omitOptionalTags || false,
      allowParseErrors: l2.allowParseErrors || false,
      allowDangerousCharacters: l2.allowDangerousCharacters || false,
      quoteSmart: l2.quoteSmart || false,
      preferUnquoted: l2.preferUnquoted || false,
      tightAttributes: l2.tightAttributes || false,
      upperDoctype: l2.upperDoctype || false,
      tightDoctype: l2.tightDoctype || false,
      bogusComments: l2.bogusComments || false,
      tightCommaSeparatedLists: l2.tightCommaSeparatedLists || false,
      tightSelfClosing: l2.tightSelfClosing || false,
      collapseEmptyAttributes: l2.collapseEmptyAttributes || false,
      allowDangerousHtml: l2.allowDangerousHtml || false,
      voids: l2.voids || Tn3,
      characterReferences: l2.characterReferences || l2.entities || {},
      closeSelfClosing: l2.closeSelfClosing || false,
      closeEmptyElements: l2.closeEmptyElements || false
    },
    schema: l2.space === "svg" ? G3 : an2,
    quote: e2,
    alternative: o3
  }.one(
    Array.isArray(n2) ? { type: "root", children: n2 } : n2,
    void 0,
    void 0
  );
}
function xt3(n2, t2, l2) {
  return yt3(n2, t2, l2, this);
}
function wt2(n2) {
  const t2 = [], l2 = n2 && n2.children || [];
  let e2 = -1;
  for (; ++e2 < l2.length; )
    t2[e2] = this.one(l2[e2], e2, n2);
  return t2.join("");
}
function ue3(n2) {
  return vt2(n2, { space: "svg" });
}
async function Lt2(n2) {
  const t2 = n2.map(kt2), l2 = await Promise.all(t2), e2 = xn3(l2), o3 = [], a2 = {};
  for (const { id: r3, filename: s3, parseTree: u3 } of l2) {
    const { type: c4, side: d } = e2[r3];
    o3.push({ id: r3, filename: s3, type: c4, side: d }), a2[r3] = u3;
  }
  return { layers: o3, parseTreesById: a2 };
}
async function kt2(n2) {
  const t2 = R3(), { filename: l2, contents: e2 } = await bn3(n2), o3 = bn(e2);
  return { id: t2, filename: l2, parseTree: o3 };
}
function At2(n2) {
  const { layers: t2, parseTreesById: l2 } = n2, e2 = {};
  for (const { id: a2 } of t2)
    e2[a2] = Pe2(l2[a2]);
  const o3 = Mn3(t2, e2, 0.02);
  return { layers: t2, plotTreesById: e2, boardShape: o3 };
}
function Dt2(n2) {
  const { layers: t2, boardShape: l2, plotTreesById: e2 } = n2, o3 = Ne2(l2), a2 = {};
  for (const { id: r3 } of t2)
    a2[r3] = Tn2(
      e2[r3],
      o3.viewBox
    );
  return { layers: t2, rendersById: a2, boardShapeRender: o3 };
}
function Rt2(n2) {
  const { layers: t2, rendersById: l2, boardShapeRender: e2 } = n2, { viewBox: o3, path: a2 } = e2, r3 = Ce3(t2), [s3, u3, c4, d] = o3, S5 = {}, v3 = (x3) => l2[x3].children;
  for (const x3 of [_2, b4]) {
    const {
      copper: Re2,
      solderMask: Me3,
      silkScreen: Te2,
      solderPaste: Ie2
    } = j3(x3, t2), T4 = R3(), W3 = `drill-${T4}`, K = `resist-${T4}`, X2 = `shape-${T4}`, Be2 = a2 ? `url(#${X2})` : void 0, Fe2 = x3 === b4 ? `translate(${2 * s3 + c4},0) scale(-1,1)` : void 0;
    S5[x3] = h(
      "svg",
      {
        ...On2,
        ...Dn,
        viewBox: `${s3} ${u3} ${c4} ${d}`
      },
      [
        h("defs", [
          h("mask", { id: W3 }, [
            h("rect", { x: s3, y: u3, width: c4, height: d, fill: "#fff" }),
            h("g", { color: "#000" }, r3.flatMap(v3))
          ]),
          h("mask", { id: K }, [
            h("rect", { x: s3, y: u3, width: c4, height: d, fill: "#fff" }),
            h("g", { color: "#000" }, Me3.flatMap(v3))
          ]),
          a2 ? h("clipPath", { id: X2 }, a2) : void 0
        ]),
        h("g", { transform: Fe2, "clip-path": Be2 }, [
          h("g", { mask: `url(#${W3})` }, [
            h("rect", { fill: "#666", x: s3, y: u3, width: c4, height: d }),
            h("g", { color: "#c93" }, Re2.flatMap(v3))
          ]),
          h("g", { mask: `url(#${K})` }, [
            h("rect", { fill: "#004200", opacity: "0.8", x: s3, y: u3, width: c4, height: d }),
            h("g", { color: "#fff" }, Te2.flatMap(v3))
          ]),
          h("g", { color: "#999" }, Ie2.flatMap(v3))
        ])
      ]
    );
  }
  return S5;
}
function Mt2(n2) {
  const { layers: t2, plotTreesById: l2, boardShape: e2 } = n2, { viewBox: o3, path: a2 } = Ne2(e2), r3 = j3(_2, t2), s3 = j3(b4, t2), u3 = Ce3(t2), c4 = {
    viewBox: o3,
    svgFragment: a2 ? ue3(a2) : void 0
  }, d = {};
  for (const { id: S5 } of t2)
    d[S5] = ue3(
      In2(l2[S5])
    );
  return {
    layers: t2,
    topLayers: r3,
    bottomLayers: s3,
    drillLayers: u3,
    boardShapeRenderFragment: c4,
    svgFragmentsById: d
  };
}
export {
  At2 as plot,
  Lt2 as read,
  Rt2 as renderBoard,
  Mt2 as renderFragments,
  Dt2 as renderLayers,
  ue3 as stringifySvg
};
//# sourceMappingURL=@tracespace_core.js.map
