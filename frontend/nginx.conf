server {
  listen 80;
  server_name localhost;

  root /usr/share/nginx/html;
  index index.html;
  client_max_body_size 100M;

  # Enable gzip compression
  gzip on;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_comp_level 6;
  gzip_min_length 1000;

  # Cache static assets
  location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
    expires 1y;
    add_header Cache-Control "public, no-transform";
    try_files $uri =404;
  }

  location /assets/ {
    expires 1y;
    add_header Cache-Control "public, no-transform";
    try_files $uri =404;
  }

  # Frontend SPA routing
  location / {
    try_files $uri $uri/ /index.html;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
  }

  # ✅ Proxy API requests — sửa tại đây
  location /api/ {
    # ✅ Dấu `/` ở cuối là rất quan trọng
    proxy_pass http://backend:3000;
    
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;

    # ✅ Preflight (OPTIONS) support
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
      add_header Access-Control-Allow-Headers "Content-Type, Authorization";
      return 204;
    }
  }

  # ✅ Proxy WebSocket
  location /socket.io/ {
    proxy_pass http://backend:3000;
    proxy_http_version 1.1;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_read_timeout 3600;
    proxy_cache_bypass $http_upgrade;

    # ✅ OPTIONS cho WebSocket
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
      add_header Access-Control-Allow-Headers "Content-Type, Authorization";
      return 204;
    }
  }

  # Error pages
  error_page 404 /index.html;
  error_page 500 502 503 504 /50x.html;
  location = /50x.html {
    root /usr/share/nginx/html;
  }
}
