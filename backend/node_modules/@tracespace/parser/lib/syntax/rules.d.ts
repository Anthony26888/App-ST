import type { Token } from '../lexer';
import type { Filetype } from '../types';
import type { GerberNode } from '../tree';
export declare const SINGLE_TOKEN = "TOKEN";
export declare const MIN_TO_MAX = "MIN_TO_MAX";
export interface SyntaxRule<Node = GerberNode> {
    name: string;
    rules: TokenRule[];
    createNodes: (tokens: Token[]) => Node[];
    filetype?: Filetype;
}
export type TokenRule = SingleTokenRule | MinToMaxRule;
export interface SingleTokenRule {
    rule: typeof SINGLE_TOKEN;
    type: Token['type'];
    value: Token['value'] | RegExp | null | undefined;
    negate?: boolean;
}
export interface MinToMaxRule {
    rule: typeof MIN_TO_MAX;
    min: number;
    max: number;
    match: SingleTokenRule[];
}
export declare function token(type: Token['type'], value?: Token['value'] | RegExp): SingleTokenRule;
export declare function notToken(type: Token['type'], value?: Token['value']): SingleTokenRule;
export declare function one(match: SingleTokenRule[]): MinToMaxRule;
export declare function zeroOrOne(match: SingleTokenRule[]): MinToMaxRule;
export declare function zeroOrMore(match: SingleTokenRule[]): MinToMaxRule;
export declare function oneOrMore(match: SingleTokenRule[]): MinToMaxRule;
export declare function minToMax(min: number, max: number, match: SingleTokenRule[]): MinToMaxRule;
export interface MatchSearchResult<Node> {
    filetype?: Filetype;
    nodes?: Node[];
    tokens?: Token[];
    candidates?: Array<SyntaxRule<Node>>;
}
export declare function findSyntaxMatch<Node>(tokens: Token[], candidates: Array<SyntaxRule<Node>>): MatchSearchResult<Node>;
